

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 19 16:06:21 2021

Microchip MPLAB XC8 C Compiler v2.05 (Pro license) build 20181220022703 Og9s 
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	_reserve_location_text,global,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	pa_nodes0,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.05
    43                           ; Generated 20/12/2018 GMT
    44                           ; 
    45                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC12LF1572 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0115                     	;# 
   121  0116                     	;# 
   122  0117                     	;# 
   123  0118                     	;# 
   124  0119                     	;# 
   125  011D                     	;# 
   126  011D                     	;# 
   127  018C                     	;# 
   128  0191                     	;# 
   129  0191                     	;# 
   130  0192                     	;# 
   131  0193                     	;# 
   132  0193                     	;# 
   133  0194                     	;# 
   134  0195                     	;# 
   135  0196                     	;# 
   136  0199                     	;# 
   137  019A                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019C                     	;# 
   141  019D                     	;# 
   142  019E                     	;# 
   143  019F                     	;# 
   144  020C                     	;# 
   145  028C                     	;# 
   146  030C                     	;# 
   147  038C                     	;# 
   148  0391                     	;# 
   149  0392                     	;# 
   150  0393                     	;# 
   151  0691                     	;# 
   152  0692                     	;# 
   153  0693                     	;# 
   154  0694                     	;# 
   155  0695                     	;# 
   156  0D8E                     	;# 
   157  0D8F                     	;# 
   158  0D90                     	;# 
   159  0D91                     	;# 
   160  0D91                     	;# 
   161  0D92                     	;# 
   162  0D93                     	;# 
   163  0D93                     	;# 
   164  0D94                     	;# 
   165  0D95                     	;# 
   166  0D95                     	;# 
   167  0D96                     	;# 
   168  0D97                     	;# 
   169  0D97                     	;# 
   170  0D98                     	;# 
   171  0D99                     	;# 
   172  0D99                     	;# 
   173  0D9A                     	;# 
   174  0D9B                     	;# 
   175  0D9C                     	;# 
   176  0D9C                     	;# 
   177  0D9D                     	;# 
   178  0D9D                     	;# 
   179  0D9E                     	;# 
   180  0D9F                     	;# 
   181  0DA0                     	;# 
   182  0DA1                     	;# 
   183  0DA1                     	;# 
   184  0DA2                     	;# 
   185  0DA3                     	;# 
   186  0DA3                     	;# 
   187  0DA4                     	;# 
   188  0DA5                     	;# 
   189  0DA5                     	;# 
   190  0DA6                     	;# 
   191  0DA7                     	;# 
   192  0DA7                     	;# 
   193  0DA8                     	;# 
   194  0DA9                     	;# 
   195  0DA9                     	;# 
   196  0DAA                     	;# 
   197  0DAB                     	;# 
   198  0DAC                     	;# 
   199  0DAC                     	;# 
   200  0DAD                     	;# 
   201  0DAD                     	;# 
   202  0DAE                     	;# 
   203  0DAF                     	;# 
   204  0DB0                     	;# 
   205  0DB1                     	;# 
   206  0DB1                     	;# 
   207  0DB2                     	;# 
   208  0DB3                     	;# 
   209  0DB3                     	;# 
   210  0DB4                     	;# 
   211  0DB5                     	;# 
   212  0DB5                     	;# 
   213  0DB6                     	;# 
   214  0DB7                     	;# 
   215  0DB7                     	;# 
   216  0DB8                     	;# 
   217  0DB9                     	;# 
   218  0DB9                     	;# 
   219  0DBA                     	;# 
   220  0DBB                     	;# 
   221  0DBC                     	;# 
   222  0DBC                     	;# 
   223  0DBD                     	;# 
   224  0DBD                     	;# 
   225  0DBE                     	;# 
   226  0DBF                     	;# 
   227  0DC0                     	;# 
   228  0FE4                     	;# 
   229  0FE5                     	;# 
   230  0FE6                     	;# 
   231  0FE7                     	;# 
   232  0FE8                     	;# 
   233  0FE8                     	;# 
   234  0FE9                     	;# 
   235  0FEA                     	;# 
   236  0FEA                     	;# 
   237  0FEB                     	;# 
   238  0FED                     	;# 
   239  0FEE                     	;# 
   240  0FEE                     	;# 
   241  0FEF                     	;# 
   242  07E0                     _reserve_location_absaddr	set	2016
   243                           
   244                           	psect	stringtext1
   245  06B7                     __pstringtext1:	
   246  06B7                     _bit_convt_4to6:	
   247  06B7  342D               	retlw	45
   248  06B8  342E               	retlw	46
   249  06B9  3433               	retlw	51
   250  06BA  3435               	retlw	53
   251  06BB  3436               	retlw	54
   252  06BC  3429               	retlw	41
   253  06BD  342A               	retlw	42
   254  06BE  343C               	retlw	60
   255  06BF  3423               	retlw	35
   256  06C0  3425               	retlw	37
   257  06C1  3426               	retlw	38
   258  06C2  3439               	retlw	57
   259  06C3  343A               	retlw	58
   260  06C4  3432               	retlw	50
   261  06C5  343E               	retlw	62
   262  06C6  343F               	retlw	63
   263  06C7                     __end_of_bit_convt_4to6:	
   264  07E0                     _reserve_location_absaddr	set	2016
   265                           
   266                           	psect	_reserve_location_text
   267  07E0                     __p_reserve_location_text:	
   268  07E0                     _reserve_location:	
   269  07E0  3400               	retlw	0
   270  07E1  3400               	retlw	0
   271  07E2  3400               	retlw	0
   272  07E3  3400               	retlw	0
   273  07E4  3400               	retlw	0
   274  07E5  3400               	retlw	0
   275  07E6  3400               	retlw	0
   276  07E7  3400               	retlw	0
   277  07E8  3400               	retlw	0
   278  07E9  3400               	retlw	0
   279  07EA  3400               	retlw	0
   280  07EB  3400               	retlw	0
   281  07EC  3400               	retlw	0
   282  07ED  3400               	retlw	0
   283  07EE  3400               	retlw	0
   284  07EF  3400               	retlw	0
   285  07F0  3400               	retlw	0
   286  07F1  3400               	retlw	0
   287  07F2  3400               	retlw	0
   288  07F3  3400               	retlw	0
   289  07F4  3400               	retlw	0
   290  07F5  3400               	retlw	0
   291  07F6  3400               	retlw	0
   292  07F7  3400               	retlw	0
   293  07F8  3400               	retlw	0
   294  07F9  3400               	retlw	0
   295  07FA  3400               	retlw	0
   296  07FB  3400               	retlw	0
   297  07FC  3400               	retlw	0
   298  07FD  3400               	retlw	0
   299  07FE  3400               	retlw	0
   300  07FF  3400               	retlw	0
   301  0800                     __end_of_reserve_location:	
   302                           
   303                           	psect	nvCOMMON
   304  007D                     __pnvCOMMON:	
   305  007D                     _timer0ReloadVal:	
   306  007D                     	ds	1
   307  0011                     _PIR1bits	set	17
   308  000C                     _PORTAbits	set	12
   309  000B                     _INTCONbits	set	11
   310  0015                     _TMR0	set	21
   311  0095                     _OPTION_REG	set	149
   312  0095                     _OPTION_REGbits	set	149
   313  008C                     _TRISA	set	140
   314  0097                     _WDTCON	set	151
   315  0098                     _OSCTUNE	set	152
   316  0099                     _OSCCON	set	153
   317  011D                     _APFCON	set	285
   318  010C                     _LATA	set	268
   319  0116                     _BORCON	set	278
   320  0196                     _PMCON2	set	406
   321  0193                     _PMDATL	set	403
   322  0194                     _PMDATH	set	404
   323  0195                     _PMCON1bits	set	405
   324  0192                     _PMADRH	set	402
   325  0191                     _PMADRL	set	401
   326  019A                     _TXREG	set	410
   327  019C                     _SPBRGH	set	412
   328  019B                     _SPBRGL	set	411
   329  019E                     _TXSTA	set	414
   330  019D                     _RCSTA	set	413
   331  019F                     _BAUDCON	set	415
   332  018C                     _ANSELA	set	396
   333  020C                     _WPUA	set	524
   334  028C                     _ODCONA	set	652
   335  030C                     _SLRCONA	set	780
   336  038C                     _INLVLA	set	908
   337                           
   338                           ; #config settings
   339  0000                     
   340                           	psect	cinit
   341  0015                     start_initialization:	
   342  0015                     __initialization:	
   343                           
   344                           ; Clear objects allocated to BANK1
   345  0015  30A0               	movlw	low __pbssBANK1
   346  0016  0084               	movwf	4
   347  0017  3000               	movlw	high __pbssBANK1
   348  0018  0085               	movwf	5
   349  0019  302D               	movlw	45
   350  001A  26ED               	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to BANK2
   353  001B  3020               	movlw	low __pbssBANK2
   354  001C  0084               	movwf	4
   355  001D  3001               	movlw	high __pbssBANK2
   356  001E  0085               	movwf	5
   357  001F  3028               	movlw	40
   358  0020  26ED               	fcall	clear_ram0
   359  0021                     end_of_initialization:	
   360                           ;End of C runtime variable initialization code
   361                           
   362  0021                     __end_of__initialization:	
   363  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   364  0022  0020               	movlb	0
   365  0023  2C06               	ljmp	l2340	;jump to C main() function
   366                           
   367                           	psect	bssBANK1
   368  00A0                     __pbssBANK1:	
   369  00A0                     _combo1_pressed:	
   370  00A0                     	ds	4
   371  00A4                     _combo0_pressed:	
   372  00A4                     	ds	4
   373  00A8                     _last_tick:	
   374  00A8                     	ds	4
   375  00AC                     _tick:	
   376  00AC                     	ds	4
   377  00B0                     _counter:	
   378  00B0                     	ds	16
   379  00C0                     _seed:	
   380  00C0                     	ds	8
   381  00C8                     _button_packet:	
   382  00C8                     	ds	5
   383                           
   384                           	psect	bssBANK2
   385  0120                     __pbssBANK2:	
   386  0120                     _buttons:	
   387  0120                     	ds	40
   388                           
   389                           	psect	clrtext
   390  06ED                     clear_ram0:	
   391                           ;	Called with FSR0 containing the base address, and
   392                           ;	WREG with the size to clear
   393                           
   394  06ED  0064               	clrwdt	;clear the watchdog before getting into this loop
   395  06EE                     clrloop0:	
   396  06EE  0180               	clrf	0	;clear RAM location pointed to by FSR
   397  06EF  3101               	addfsr 0,1
   398  06F0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   399  06F1  2EEE               	goto	clrloop0	;have we reached the end yet?
   400  06F2  3400               	retlw	0	;all done for this memory range, return
   401                           
   402                           	psect	cstackBANK1
   403  00CD                     __pcstackBANK1:	
   404  00CD                     button_task@combo0_pressed_now:	
   405                           
   406                           ; 4 bytes @ 0x0
   407  00CD                     	ds	4
   408  00D1                     button_task@combo1_pressed_now:	
   409                           
   410                           ; 4 bytes @ 0x4
   411  00D1                     	ds	4
   412  00D5                     button_task@i:	
   413                           
   414                           ; 1 bytes @ 0x8
   415  00D5                     	ds	1
   416  00D6                     ??_main:	
   417                           
   418                           ; 1 bytes @ 0x9
   419  00D6                     	ds	12
   420  00E2                     main@seed:	
   421                           
   422                           ; 4 bytes @ 0x15
   423  00E2                     	ds	4
   424                           
   425                           	psect	cstackCOMMON
   426  0070                     __pcstackCOMMON:	
   427  0070                     ?_memcpy:	
   428  0070                     ?_srand:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_system_initialize:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ??_system_initialize:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_timer_interrupt_handler:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ??_timer_interrupt_handler:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_button_get_state:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ??_button_get_state:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_button_init:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_button_task:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_usart_write:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_usart_write:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_rf_encrypt_and_send:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_crc8:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_INTERRUPT_InterruptManager:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_INTERRUPT_InterruptManager:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_counter_inc:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ??_counter_inc:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_FLASH_EraseBlock:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_counter_read:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_counter_save:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_main:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ??___omul:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?___bmul:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_memset:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_FLASH_ReadWord:	
   501                           ; 2 bytes @ 0x0
   502                           
   503  0070                     ?_millis:	
   504                           ; 2 bytes @ 0x0
   505                           
   506  0070                     usart_write@data:	
   507                           ; 4 bytes @ 0x0
   508                           
   509  0070                     crc8@len:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ___bmul@multiplicand:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     FLASH_ReadWord@flashAddr:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     FLASH_EraseBlock@startAddr:	
   519                           ; 2 bytes @ 0x0
   520                           
   521  0070                     memcpy@s1:	
   522                           ; 2 bytes @ 0x0
   523                           
   524  0070                     memset@dest:	
   525                           ; 2 bytes @ 0x0
   526                           
   527  0070                     srand@s:	
   528                           ; 2 bytes @ 0x0
   529                           
   530                           
   531                           ; 2 bytes @ 0x0
   532  0070                     	ds	1
   533  0071                     ??_rf_encrypt_and_send:	
   534  0071                     ??_crc8:	
   535                           ; 1 bytes @ 0x1
   536                           
   537  0071                     ??___bmul:	
   538                           ; 1 bytes @ 0x1
   539                           
   540  0071                     rf_encrypt_and_send@data:	
   541                           ; 1 bytes @ 0x1
   542                           
   543  0071                     ___bmul@product:	
   544                           ; 1 bytes @ 0x1
   545                           
   546  0071                     ___omul@product:	
   547                           ; 1 bytes @ 0x1
   548                           
   549                           
   550                           ; 8 bytes @ 0x1
   551  0071                     	ds	1
   552  0072                     ??_srand:	
   553  0072                     ??_FLASH_ReadWord:	
   554                           ; 1 bytes @ 0x2
   555                           
   556  0072                     ??_FLASH_EraseBlock:	
   557                           ; 1 bytes @ 0x2
   558                           
   559  0072                     button_get_state@btn:	
   560                           ; 1 bytes @ 0x2
   561                           
   562  0072                     crc8@buffer:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0072                     counter_inc@ctx:	
   566                           ; 1 bytes @ 0x2
   567                           
   568  0072                     FLASH_ReadWord@GIEBitValue:	
   569                           ; 1 bytes @ 0x2
   570                           
   571  0072                     FLASH_EraseBlock@GIEBitValue:	
   572                           ; 1 bytes @ 0x2
   573                           
   574  0072                     ___bmul@multiplier:	
   575                           ; 1 bytes @ 0x2
   576                           
   577  0072                     rf_encrypt_and_send@enc:	
   578                           ; 1 bytes @ 0x2
   579                           
   580  0072                     memcpy@n:	
   581                           ; 2 bytes @ 0x2
   582                           
   583  0072                     memset@c:	
   584                           ; 2 bytes @ 0x2
   585                           
   586                           
   587                           ; 2 bytes @ 0x2
   588  0072                     	ds	1
   589  0073                     ?_counter_inc_by_n:	
   590  0073                     ?_FLASH_WriteBlock:	
   591                           ; 1 bytes @ 0x3
   592                           
   593  0073                     button_get_state@state:	
   594                           ; 1 bytes @ 0x3
   595                           
   596  0073                     crc8@i:	
   597                           ; 1 bytes @ 0x3
   598                           
   599  0073                     counter_inc_by_n@val:	
   600                           ; 1 bytes @ 0x3
   601                           
   602  0073                     FLASH_WriteBlock@writeAddr:	
   603                           ; 2 bytes @ 0x3
   604                           
   605                           
   606                           ; 2 bytes @ 0x3
   607  0073                     	ds	1
   608  0074                     ??_memcpy:	
   609  0074                     ??_millis:	
   610                           ; 1 bytes @ 0x4
   611                           
   612  0074                     rf_encrypt_and_send@mbyte:	
   613                           ; 1 bytes @ 0x4
   614                           
   615  0074                     crc8@crc:	
   616                           ; 1 bytes @ 0x4
   617                           
   618  0074                     memcpy@tmp:	
   619                           ; 1 bytes @ 0x4
   620                           
   621  0074                     memset@n:	
   622                           ; 1 bytes @ 0x4
   623                           
   624                           
   625                           ; 2 bytes @ 0x4
   626  0074                     	ds	1
   627  0075                     ??_counter_inc_by_n:	
   628  0075                     FLASH_WriteBlock@flashWordArray:	
   629                           ; 1 bytes @ 0x5
   630                           
   631  0075                     counter_inc_by_n@i:	
   632                           ; 1 bytes @ 0x5
   633                           
   634  0075                     memcpy@s:	
   635                           ; 2 bytes @ 0x5
   636                           
   637                           
   638                           ; 2 bytes @ 0x5
   639  0075                     	ds	1
   640  0076                     ??_memset:	
   641  0076                     ??_FLASH_WriteBlock:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 1 bytes @ 0x6
   646  0076                     	ds	1
   647  0077                     counter_inc_by_n@ctx:	
   648  0077                     memcpy@d:	
   649                           ; 1 bytes @ 0x7
   650                           
   651                           
   652                           ; 1 bytes @ 0x7
   653  0077                     	ds	1
   654  0078                     memcpy@d1:	
   655                           
   656                           ; 1 bytes @ 0x8
   657  0078                     	ds	1
   658  0079                     ?_rand:	
   659  0079                     FLASH_WriteBlock@GIEBitValue:	
   660                           ; 2 bytes @ 0x9
   661                           
   662                           
   663                           ; 1 bytes @ 0x9
   664  0079                     	ds	1
   665  007A                     ??_button_init:	
   666  007A                     ??_counter_read:	
   667                           ; 1 bytes @ 0xA
   668                           
   669  007A                     FLASH_WriteBlock@blockStartAddr:	
   670                           ; 1 bytes @ 0xA
   671                           
   672                           
   673                           ; 2 bytes @ 0xA
   674  007A                     	ds	1
   675  007B                     ?_rf_send_packet:	
   676  007B                     rf_send_packet@len:	
   677                           ; 2 bytes @ 0xB
   678                           
   679                           
   680                           ; 1 bytes @ 0xB
   681  007B                     	ds	1
   682  007C                     ??_rf_send_packet:	
   683  007C                     FLASH_WriteBlock@i:	
   684                           ; 1 bytes @ 0xC
   685                           
   686                           
   687                           ; 1 bytes @ 0xC
   688  007C                     	ds	1
   689                           
   690                           	psect	cstackBANK0
   691  0020                     __pcstackBANK0:	
   692  0020                     ?___omul:	
   693  0020                     memset@k:	
   694                           ; 8 bytes @ 0x0
   695                           
   696  0020                     ___omul@multiplier:	
   697                           ; 2 bytes @ 0x0
   698                           
   699                           
   700                           ; 8 bytes @ 0x0
   701  0020                     	ds	2
   702  0022                     memset@s:	
   703                           
   704                           ; 2 bytes @ 0x2
   705  0022                     	ds	2
   706  0024                     ??_counter_save:	
   707  0024                     counter_read@temp:	
   708                           ; 1 bytes @ 0x4
   709                           
   710                           
   711                           ; 16 bytes @ 0x4
   712  0024                     	ds	4
   713  0028                     ___omul@multiplicand:	
   714                           
   715                           ; 8 bytes @ 0x8
   716  0028                     	ds	1
   717  0029                     counter_save@block:	
   718                           
   719                           ; 64 bytes @ 0x9
   720  0029                     	ds	7
   721  0030                     ??_rand:	
   722                           
   723                           ; 1 bytes @ 0x10
   724  0030                     	ds	4
   725  0034                     counter_read@ctx:	
   726                           
   727                           ; 1 bytes @ 0x14
   728  0034                     	ds	1
   729  0035                     counter_read@i:	
   730                           
   731                           ; 1 bytes @ 0x15
   732  0035                     	ds	3
   733  0038                     rf_send_packet@plain_msg:	
   734                           
   735                           ; 31 bytes @ 0x18
   736  0038                     	ds	31
   737  0057                     rf_send_packet@data:	
   738                           
   739                           ; 1 bytes @ 0x37
   740  0057                     	ds	1
   741  0058                     rf_send_packet@i:	
   742                           
   743                           ; 1 bytes @ 0x38
   744  0058                     	ds	1
   745  0059                     rf_send_packet@random_nm2:	
   746                           
   747                           ; 4 bytes @ 0x39
   748  0059                     	ds	4
   749  005D                     rf_send_packet@tx_id:	
   750                           
   751                           ; 4 bytes @ 0x3D
   752  005D                     	ds	4
   753  0061                     rf_send_packet@random_nm0:	
   754                           
   755                           ; 4 bytes @ 0x41
   756  0061                     	ds	4
   757  0065                     rf_send_packet@random_nm1:	
   758                           
   759                           ; 4 bytes @ 0x45
   760  0065                     	ds	4
   761  0069                     rf_send_packet@index:	
   762  0069                     counter_save@ctx:	
   763                           ; 1 bytes @ 0x49
   764                           
   765                           
   766                           ; 1 bytes @ 0x49
   767  0069                     	ds	1
   768  006A                     ??_button_task:	
   769  006A                     counter_save@temp:	
   770                           ; 1 bytes @ 0x4A
   771                           
   772                           
   773                           ; 1 bytes @ 0x4A
   774  006A                     	ds	1
   775  006B                     counter_save@i:	
   776                           
   777                           ; 1 bytes @ 0x4B
   778  006B                     	ds	3
   779                           
   780                           	psect	maintext
   781  0406                     __pmaintext:	
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 653 in file "BTZGDRtx.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  seed            4   21[BANK1 ] unsigned long 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : B1F/0
   798 ;;		On exit  : 1E/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   801 ;;      Params:         0       0       0       0
   802 ;;      Locals:         0       0       4       0
   803 ;;      Temps:          0       0      12       0
   804 ;;      Totals:         0       0      16       0
   805 ;;Total ram usage:       16 bytes
   806 ;; Hardware stack levels required when called:    6
   807 ;; This function calls:
   808 ;;		_button_init
   809 ;;		_button_task
   810 ;;		_counter_inc_by_n
   811 ;;		_counter_read
   812 ;;		_counter_save
   813 ;;		_memset
   814 ;;		_millis
   815 ;;		_srand
   816 ;;		_system_initialize
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _main
   824  0406                     _main:	
   825  0406                     l2340:	
   826                           ;incstack = 0
   827                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   828                           
   829                           
   830                           ;BTZGDRtx.c: 656:     system_initialize();
   831  0406  2586               	fcall	_system_initialize
   832                           
   833                           ;BTZGDRtx.c: 658:     memset(&counter, 0, sizeof (counter_t));
   834  0407  30B0               	movlw	low _counter
   835  0408  00F0               	movwf	memset@dest
   836  0409  3000               	movlw	high _counter
   837  040A  00F1               	movwf	memset@dest+1
   838  040B  3010               	movlw	16
   839  040C  2574               	fcall	PL24	;call to abstracted procedure
   840  040D  229D               	fcall	_memset
   841                           
   842                           ;BTZGDRtx.c: 659:     counter_read(&counter);
   843  040E  30B0               	movlw	(low (_counter| 0))& (0+255)
   844  040F  24B1               	fcall	_counter_read
   845                           
   846                           ;BTZGDRtx.c: 660:     counter_inc_by_n(&counter, 5);
   847  0410  3005               	movlw	5
   848  0411  00F3               	movwf	counter_inc_by_n@val
   849  0412  30B0               	movlw	(low (_counter| 0))& (0+255)
   850  0413  01F4               	clrf	counter_inc_by_n@val+1
   851  0414  26A6               	fcall	_counter_inc_by_n
   852                           
   853                           ;BTZGDRtx.c: 661:     counter_save(&counter);
   854  0415  30B0               	movlw	(low (_counter| 0))& (0+255)
   855  0416  2544               	fcall	_counter_save
   856                           
   857                           ;BTZGDRtx.c: 663:     button_init();
   858  0417  25EF               	fcall	_button_init
   859                           
   860                           ;BTZGDRtx.c: 665:     INTCONbits.GIE = 1;
   861  0418  178B               	bsf	11,7	;volatile
   862                           
   863                           ;BTZGDRtx.c: 667:     seed = counter.word0 + counter.word1 + counter.word2 + counter.wor
      +                          d3 +
   864  0419  30BE               	movlw	((low (_counter| 0))& (0+255)+14)
   865  041A  0086               	movwf	6
   866  041B  300C               	movlw	12
   867  041C  0187               	clrf	7
   868  041D  3EB0               	addlw	(low (_counter| 0))& (0+255)
   869  041E  0084               	movwf	4
   870  041F  0185               	clrf	5
   871  0420  0834               	movf	(_counter^(0+128)+4),w
   872  0421  0732               	addwf	(_counter^(0+128)+2),w
   873  0422  00D6               	movwf	??_main^(0+128)
   874  0423  0835               	movf	((_counter+1)^(0+128)+4),w
   875  0424  3D33               	addwfc	((_counter+1)^(0+128)+2),w
   876  0425  00D7               	movwf	(??_main+1)^(0+128)
   877  0426  0836               	movf	(_counter^(0+128)+6),w
   878  0427  0756               	addwf	??_main^(0+128),w
   879  0428  00D8               	movwf	(??_main+2)^(0+128)
   880  0429  0837               	movf	((_counter+1)^(0+128)+6),w
   881  042A  3D57               	addwfc	(??_main+1)^(0+128),w
   882  042B  00D9               	movwf	(??_main+3)^(0+128)
   883  042C  0838               	movf	(_counter^(0+128)+8),w
   884  042D  0758               	addwf	(??_main+2)^(0+128),w
   885  042E  00DA               	movwf	(??_main+4)^(0+128)
   886  042F  0839               	movf	((_counter+1)^(0+128)+8),w
   887  0430  3D59               	addwfc	(??_main+3)^(0+128),w
   888  0431  00DB               	movwf	(??_main+5)^(0+128)
   889  0432  083A               	movf	(_counter^(0+128)+10),w
   890  0433  075A               	addwf	(??_main+4)^(0+128),w
   891  0434  00DC               	movwf	(??_main+6)^(0+128)
   892  0435  083B               	movf	((_counter+1)^(0+128)+10),w
   893  0436  3D5B               	addwfc	(??_main+5)^(0+128),w
   894  0437  00DD               	movwf	(??_main+7)^(0+128)
   895  0438  3F00               	moviw [0]fsr0
   896  0439  075C               	addwf	(??_main+6)^(0+128),w
   897  043A  00DE               	movwf	(??_main+8)^(0+128)
   898  043B  3F01               	moviw [1]fsr0
   899  043C  3D5D               	addwfc	(??_main+7)^(0+128),w
   900  043D  00DF               	movwf	((??_main+8)^(0+128)+1)
   901  043E  3F40               	moviw [0]fsr1
   902  043F  075E               	addwf	(??_main+8)^(0+128),w
   903  0440  00E0               	movwf	(??_main+10)^(0+128)
   904  0441  3F41               	moviw [1]fsr1
   905  0442  3D5F               	addwfc	(??_main+9)^(0+128),w
   906  0443  00E1               	movwf	((??_main+10)^(0+128)+1)
   907  0444  0830               	movf	_counter^(0+128),w
   908  0445  0760               	addwf	(??_main+10)^(0+128),w
   909  0446  00E2               	movwf	main@seed^(0+128)
   910  0447  0831               	movf	(_counter+1)^(0+128),w
   911  0448  3D61               	addwfc	(??_main+11)^(0+128),w
   912  0449  00E3               	movwf	(main@seed+1)^(0+128)
   913  044A  01E4               	clrf	(main@seed+2)^(0+128)
   914  044B  01E5               	clrf	(main@seed+3)^(0+128)
   915  044C  26D3               	fcall	_millis
   916  044D  0870               	movf	?_millis,w
   917  044E  07E2               	addwf	main@seed^(0+128),f
   918  044F  0871               	movf	?_millis+1,w
   919  0450  3DE3               	addwfc	(main@seed+1)^(0+128),f
   920  0451  0872               	movf	?_millis+2,w
   921  0452  3DE4               	addwfc	(main@seed+2)^(0+128),f
   922  0453  0873               	movf	?_millis+3,w
   923  0454  3DE5               	addwfc	(main@seed+3)^(0+128),f
   924                           
   925                           ;BTZGDRtx.c: 670:     srand((unsigned) seed);
   926  0455  0863               	movf	(main@seed+1)^(0+128),w
   927  0456  00F1               	movwf	srand@s+1
   928  0457  0862               	movf	main@seed^(0+128),w
   929  0458  00F0               	movwf	srand@s
   930  0459  2695               	fcall	_srand
   931                           
   932                           ;BTZGDRtx.c: 672:     last_tick = 0;
   933  045A  01A8               	clrf	_last_tick^(0+128)
   934  045B  01A9               	clrf	(_last_tick+1)^(0+128)
   935  045C  01AA               	clrf	(_last_tick+2)^(0+128)
   936  045D  01AB               	clrf	(_last_tick+3)^(0+128)
   937  045E                     l2362:	
   938                           
   939                           ;BTZGDRtx.c: 675:         button_task();
   940  045E  2024               	fcall	_button_task
   941  045F  2C5E               	goto	l2362
   942  0460                     __end_of_main:	
   943                           
   944                           	psect	text1
   945  0586                     __ptext1:	
   946 ;; *************** function _system_initialize *****************
   947 ;; Defined at:
   948 ;;		line 37 in file "BTZGDRtx.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;		None
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, status,2
   957 ;; Tracked objects:
   958 ;;		On entry : B1F/0
   959 ;;		On exit  : B1F/3
   960 ;;		Unchanged: B00/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   962 ;;      Params:         0       0       0       0
   963 ;;      Locals:         0       0       0       0
   964 ;;      Temps:          0       0       0       0
   965 ;;      Totals:         0       0       0       0
   966 ;;Total ram usage:        0 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; Hardware stack levels required when called:    2
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           
   977                           ;psect for function _system_initialize
   978  0586                     _system_initialize:	
   979                           
   980                           ;BTZGDRtx.c: 40:     timer0ReloadVal = 131;
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _system_initialize: [wreg+status,2]
   984  0586  307A               	movlw	122
   985  0587  0021               	movlb	1	; select bank1
   986  0588  0099               	movwf	25	;volatile
   987                           
   988                           ;BTZGDRtx.c: 42: 
   989  0589  0198               	clrf	24	;volatile
   990                           
   991                           ;BTZGDRtx.c: 44: 
   992  058A  0022               	movlb	2	; select bank2
   993  058B  0196               	clrf	22	;volatile
   994                           
   995                           ;BTZGDRtx.c: 47: 
   996  058C  3016               	movlw	22
   997  058D  0021               	movlb	1	; select bank1
   998  058E  0097               	movwf	23	;volatile
   999                           
  1000                           ;BTZGDRtx.c: 50:     BAUDCON = 0x08;
  1001  058F  0022               	movlb	2	; select bank2
  1002  0590  018C               	clrf	12	;volatile
  1003                           
  1004                           ;BTZGDRtx.c: 51: 
  1005  0591  302F               	movlw	47
  1006  0592  0021               	movlb	1	; select bank1
  1007  0593  008C               	movwf	12	;volatile
  1008                           
  1009                           ;BTZGDRtx.c: 52: 
  1010  0594  0023               	movlb	3	; select bank3
  1011  0595  018C               	clrf	12	;volatile
  1012                           
  1013                           ;BTZGDRtx.c: 54: 
  1014  0596  0024               	movlb	4	; select bank4
  1015  0597  018C               	clrf	12	;volatile
  1016                           
  1017                           ;BTZGDRtx.c: 55: 
  1018  0598  0021               	movlb	1	; select bank1
  1019  0599  1795               	bsf	21,7	;volatile
  1020                           
  1021                           ;BTZGDRtx.c: 58: 
  1022  059A  0025               	movlb	5	; select bank5
  1023  059B  018C               	clrf	12	;volatile
  1024                           
  1025                           ;BTZGDRtx.c: 61: 
  1026  059C  3037               	movlw	55
  1027  059D  0026               	movlb	6	; select bank6
  1028  059E  008C               	movwf	12	;volatile
  1029  059F  303F               	movlw	63
  1030  05A0  0027               	movlb	7	; select bank7
  1031  05A1  008C               	movwf	12	;volatile
  1032  05A2  3084               	movlw	132
  1033  05A3  0022               	movlb	2	; select bank2
  1034  05A4  009D               	movwf	29	;volatile
  1035  05A5  0021               	movlb	1	; select bank1
  1036  05A6  0815               	movf	21,w	;volatile
  1037  05A7  39C0               	andlw	192
  1038  05A8  3814               	iorlw	20
  1039  05A9  0095               	movwf	21	;volatile
  1040  05AA  3083               	movlw	131
  1041  05AB  0020               	movlb	0	; select bank0
  1042  05AC  0095               	movwf	21	;volatile
  1043  05AD  00FD               	movwf	_timer0ReloadVal	;volatile
  1044  05AE  110B               	bcf	11,2	;volatile
  1045  05AF  168B               	bsf	11,5	;volatile
  1046  05B0  3008               	movlw	8
  1047  05B1  0023               	movlb	3	; select bank3
  1048  05B2  009F               	movwf	31	;volatile
  1049  05B3  3080               	movlw	128
  1050  05B4  009D               	movwf	29	;volatile
  1051  05B5  3024               	movlw	36
  1052  05B6  009E               	movwf	30	;volatile
  1053  05B7  3040               	movlw	64
  1054  05B8  009B               	movwf	27	;volatile
  1055  05B9  3003               	movlw	3
  1056  05BA  009C               	movwf	28	;volatile
  1057  05BB  0008               	return
  1058  05BC                     __end_of_system_initialize:	
  1059                           
  1060                           	psect	text2
  1061  0695                     __ptext2:	
  1062 ;; *************** function _srand *****************
  1063 ;; Defined at:
  1064 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\rand.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  s               2    0[COMMON] unsigned int 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0
  1073 ;; Tracked objects:
  1074 ;;		On entry : 1F/1
  1075 ;;		On exit  : 1F/1
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1078 ;;      Params:         2       0       0       0
  1079 ;;      Locals:         0       0       0       0
  1080 ;;      Temps:          2       0       0       0
  1081 ;;      Totals:         4       0       0       0
  1082 ;;Total ram usage:        4 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           
  1093                           ;psect for function _srand
  1094  0695                     _srand:	
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _srand: [wreg+status,2+status,0]
  1098  0695  0870               	movf	srand@s,w
  1099  0696  3EFF               	addlw	255
  1100  0697  00F2               	movwf	??_srand
  1101  0698  30FF               	movlw	255
  1102  0699  3D71               	addwfc	srand@s+1,w
  1103  069A  00F3               	movwf	??_srand+1
  1104  069B  0872               	movf	??_srand,w
  1105  069C  00C0               	movwf	_seed^(0+128)
  1106  069D  0873               	movf	??_srand+1,w
  1107  069E  00C1               	movwf	(_seed+1)^(0+128)
  1108  069F  01C2               	clrf	(_seed+2)^(0+128)
  1109  06A0  01C3               	clrf	(_seed+3)^(0+128)
  1110  06A1  01C4               	clrf	(_seed+4)^(0+128)
  1111  06A2  01C5               	clrf	(_seed+5)^(0+128)
  1112  06A3  01C6               	clrf	(_seed+6)^(0+128)
  1113  06A4  01C7               	clrf	(_seed+7)^(0+128)
  1114  06A5  0008               	return
  1115  06A6                     __end_of_srand:	
  1116                           
  1117                           	psect	text3
  1118  0544                     __ptext3:	
  1119 ;; *************** function _counter_save *****************
  1120 ;; Defined at:
  1121 ;;		line 635 in file "BTZGDRtx.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  ctx             1    wreg     PTR struct .
  1124 ;;		 -> counter(16), 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  ctx             1   73[BANK0 ] PTR struct .
  1127 ;;		 -> counter(16), 
  1128 ;;  block          64    9[BANK0 ] unsigned short [32]
  1129 ;;  i               1   75[BANK0 ] unsigned char 
  1130 ;;  temp            1   74[BANK0 ] PTR unsigned short 
  1131 ;;		 -> counter(16), 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 1C/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1141 ;;      Params:         0       0       0       0
  1142 ;;      Locals:         0      67       0       0
  1143 ;;      Temps:          0       5       0       0
  1144 ;;      Totals:         0      72       0       0
  1145 ;;Total ram usage:       72 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    4
  1148 ;; This function calls:
  1149 ;;		_FLASH_WriteBlock
  1150 ;;		_memset
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           
  1157                           ;psect for function _counter_save
  1158  0544                     _counter_save:	
  1159                           
  1160                           ;incstack = 0
  1161                           ; Regs used in _counter_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1162                           ;counter_save@ctx stored from wreg
  1163  0544  0020               	movlb	0	; select bank0
  1164  0545  00E9               	movwf	counter_save@ctx
  1165                           
  1166                           ;BTZGDRtx.c: 636:     uint16_t block[32];;BTZGDRtx.c: 637:     uint16_t *temp = (uint16_
      +                          t*) ctx;
  1167  0546  00EA               	movwf	counter_save@temp
  1168                           
  1169                           ;BTZGDRtx.c: 639:     memset(block, 0x00, sizeof (block));
  1170  0547  3029               	movlw	low counter_save@block
  1171  0548  00F0               	movwf	memset@dest
  1172  0549  3000               	movlw	high counter_save@block
  1173  054A  00F1               	movwf	memset@dest+1
  1174  054B  3040               	movlw	64
  1175  054C  2574               	fcall	PL24	;call to abstracted procedure
  1176  054D  229D               	fcall	_memset
  1177                           
  1178                           ;BTZGDRtx.c: 641:     for (i = 0; i < 8; i++) {
  1179  054E  01EB               	clrf	counter_save@i
  1180  054F                     l2330:	
  1181                           
  1182                           ;BTZGDRtx.c: 642:         block[2 * i] = (temp[i] >> 0)&0xFF;
  1183  054F  356B               	lslf	counter_save@i,w
  1184  0550  076A               	addwf	counter_save@temp,w
  1185  0551  00A4               	movwf	??_counter_save
  1186  0552  0086               	movwf	6
  1187  0553  0187               	clrf	7
  1188  0554  3F40               	moviw [0]fsr1
  1189  0555  00A5               	movwf	??_counter_save+1
  1190  0556  3F41               	moviw [1]fsr1
  1191  0557  00A6               	movwf	??_counter_save+2
  1192  0558  0825               	movf	??_counter_save+1,w
  1193  0559  2580               	fcall	PL36	;call to abstracted procedure
  1194  055A  2579               	fcall	PL26	;call to abstracted procedure
  1195                           
  1196                           ;BTZGDRtx.c: 643:         block[(2 * i) + 1] = (temp[i] >> 8)&0xFF;
  1197  055B  356B               	lslf	counter_save@i,w
  1198  055C  076A               	addwf	counter_save@temp,w
  1199  055D  00A4               	movwf	??_counter_save
  1200  055E  0086               	movwf	6
  1201  055F  3F40               	moviw [0]fsr1
  1202  0560  00A5               	movwf	??_counter_save+1
  1203  0561  3F41               	moviw [1]fsr1
  1204  0562  00A6               	movwf	??_counter_save+2
  1205  0563  00A5               	movwf	??_counter_save+1
  1206  0564  01A6               	clrf	??_counter_save+2
  1207  0565  2580               	fcall	PL36	;call to abstracted procedure
  1208  0566  3E02               	addlw	2
  1209  0567  2579               	fcall	PL26	;call to abstracted procedure
  1210  0568  3008               	movlw	8
  1211                           
  1212                           ;BTZGDRtx.c: 644:     }
  1213  0569  0AEB               	incf	counter_save@i,f
  1214  056A  026B               	subwf	counter_save@i,w
  1215  056B  1C03               	skipc
  1216  056C  2D4F               	goto	l2330
  1217                           
  1218                           ;BTZGDRtx.c: 646:     FLASH_WriteBlock((0x7E0), block);
  1219  056D  30E0               	movlw	224
  1220  056E  00F3               	movwf	FLASH_WriteBlock@writeAddr
  1221  056F  3007               	movlw	7
  1222  0570  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  1223  0571  3029               	movlw	(low (counter_save@block| 0))& (0+255)
  1224  0572  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  1225  0573  2C60               	ljmp	l1706
  1226  0574                     __end_of_counter_save:	
  1227  0574                     PL24:	
  1228  0574  01F2               	clrf	memset@c
  1229  0575  01F3               	clrf	memset@c+1
  1230  0576  00F4               	movwf	memset@n
  1231  0577  01F5               	clrf	memset@n+1
  1232  0578  0008               	return
  1233  0579                     __end_ofPL24:	
  1234  0579                     PL26:	
  1235  0579  3E29               	addlw	(low (counter_save@block| 0))& (0+255)
  1236  057A  0086               	movwf	6
  1237  057B  0827               	movf	??_counter_save+3,w
  1238  057C  3FC0               	movwi [0]fsr1
  1239  057D  0828               	movf	??_counter_save+4,w
  1240  057E  3FC1               	movwi [1]fsr1
  1241  057F  0008               	return
  1242  0580                     __end_ofPL26:	
  1243  0580                     PL36:	
  1244  0580  00A7               	movwf	??_counter_save+3
  1245  0581  01A8               	clrf	??_counter_save+4
  1246  0582  086B               	movf	counter_save@i,w
  1247  0583  0709               	addwf	9,w
  1248  0584  0709               	addwf	9,w
  1249  0585  0008               	return
  1250  0586                     __end_ofPL36:	
  1251                           
  1252                           	psect	text4
  1253  0460                     __ptext4:	
  1254 ;; *************** function _FLASH_WriteBlock *****************
  1255 ;; Defined at:
  1256 ;;		line 572 in file "BTZGDRtx.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  writeAddr       2    3[COMMON] unsigned short 
  1259 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  1260 ;;		 -> counter_save@block(64), 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  blockStartAd    2   10[COMMON] unsigned short 
  1263 ;;  i               1   12[COMMON] unsigned char 
  1264 ;;  GIEBitValue     1    9[COMMON] unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      char 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 1F/0
  1271 ;;		On exit  : 1C/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1274 ;;      Params:         3       0       0       0
  1275 ;;      Locals:         4       0       0       0
  1276 ;;      Temps:          3       0       0       0
  1277 ;;      Totals:        10       0       0       0
  1278 ;;Total ram usage:       10 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    3
  1281 ;; This function calls:
  1282 ;;		_FLASH_EraseBlock
  1283 ;; This function is called by:
  1284 ;;		_counter_save
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           
  1289                           ;psect for function _FLASH_WriteBlock
  1290  0460                     _FLASH_WriteBlock:	
  1291  0460                     l1706:	
  1292                           ;incstack = 0
  1293                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1294                           
  1295                           
  1296                           ;BTZGDRtx.c: 573:     uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x800 - 1) ^ (
      +                          16 - 1)));
  1297  0460  30FF               	movlw	255
  1298  0461  00FA               	movwf	FLASH_WriteBlock@blockStartAddr
  1299  0462  3007               	movlw	7
  1300  0463  00FB               	movwf	FLASH_WriteBlock@blockStartAddr+1
  1301  0464  300F               	movlw	15
  1302  0465  06FA               	xorwf	FLASH_WriteBlock@blockStartAddr,f
  1303  0466  0873               	movf	FLASH_WriteBlock@writeAddr,w
  1304  0467  05FA               	andwf	FLASH_WriteBlock@blockStartAddr,f
  1305  0468  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  1306  0469  05FB               	andwf	FLASH_WriteBlock@blockStartAddr+1,f
  1307                           
  1308                           ;BTZGDRtx.c: 574:     uint8_t GIEBitValue = INTCONbits.GIE;
  1309  046A  3000               	movlw	0
  1310  046B  1B8B               	btfsc	11,7	;volatile
  1311  046C  3001               	movlw	1
  1312  046D  00F9               	movwf	FLASH_WriteBlock@GIEBitValue
  1313                           
  1314                           ;BTZGDRtx.c: 575:     uint8_t i;;BTZGDRtx.c: 578:     if (writeAddr != blockStartAddr) {
  1315  046E  087B               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  1316  046F  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  1317  0470  1D03               	skipz
  1318  0471  2C74               	goto	u695
  1319  0472  087A               	movf	FLASH_WriteBlock@blockStartAddr,w
  1320  0473  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  1321  0474                     u695:	
  1322  0474  1D03               	btfss	3,2
  1323  0475  0008               	return
  1324                           
  1325                           ;BTZGDRtx.c: 582:     INTCONbits.GIE = 0;
  1326                           
  1327                           ;BTZGDRtx.c: 580:     }
  1328  0476  138B               	bcf	11,7	;volatile
  1329                           
  1330                           ;BTZGDRtx.c: 585:     FLASH_EraseBlock(writeAddr);
  1331  0477  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  1332  0478  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  1333  0479  0873               	movf	FLASH_WriteBlock@writeAddr,w
  1334  047A  00F0               	movwf	FLASH_EraseBlock@startAddr
  1335  047B  2653               	fcall	_FLASH_EraseBlock
  1336                           
  1337                           ;BTZGDRtx.c: 588:     PMCON1bits.CFGS = 0;
  1338  047C  1315               	bcf	21,6	;volatile
  1339                           
  1340                           ;BTZGDRtx.c: 589:     PMCON1bits.WREN = 1;
  1341  047D  1515               	bsf	21,2	;volatile
  1342                           
  1343                           ;BTZGDRtx.c: 590:     PMCON1bits.LWLO = 1;
  1344  047E  1695               	bsf	21,5	;volatile
  1345                           
  1346                           ;BTZGDRtx.c: 592:     for (i = 0; i < 16; i++) {
  1347  047F  01FC               	clrf	FLASH_WriteBlock@i
  1348  0480                     l1728:	
  1349                           
  1350                           ;BTZGDRtx.c: 594:         PMADRL = (writeAddr & 0xFF);
  1351  0480  0873               	movf	FLASH_WriteBlock@writeAddr,w
  1352  0481  0023               	movlb	3	; select bank3
  1353  0482  0091               	movwf	17	;volatile
  1354                           
  1355                           ;BTZGDRtx.c: 596:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  1356  0483  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  1357  0484  0092               	movwf	18	;volatile
  1358                           
  1359                           ;BTZGDRtx.c: 599:         PMDATL = flashWordArray[i];
  1360  0485  357C               	lslf	FLASH_WriteBlock@i,w
  1361  0486  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  1362  0487  00F6               	movwf	??_FLASH_WriteBlock
  1363  0488  0086               	movwf	6
  1364  0489  0187               	clrf	7
  1365  048A  0801               	movf	1,w
  1366  048B  0093               	movwf	19	;volatile
  1367                           
  1368                           ;BTZGDRtx.c: 600:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  1369  048C  357C               	lslf	FLASH_WriteBlock@i,w
  1370  048D  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  1371  048E  00F6               	movwf	??_FLASH_WriteBlock
  1372  048F  0086               	movwf	6
  1373  0490  3F40               	moviw [0]fsr1
  1374  0491  00F7               	movwf	??_FLASH_WriteBlock+1
  1375  0492  3F41               	moviw [1]fsr1
  1376  0493  00F8               	movwf	??_FLASH_WriteBlock+2
  1377  0494  0094               	movwf	20	;volatile
  1378                           
  1379                           ;BTZGDRtx.c: 602:         if (i == (16 - 1)) {
  1380  0495  300F               	movlw	15
  1381  0496  067C               	xorwf	FLASH_WriteBlock@i,w
  1382  0497  1903               	btfsc	3,2
  1383                           
  1384                           ;BTZGDRtx.c: 604:             PMCON1bits.LWLO = 0;
  1385  0498  1295               	bcf	21,5	;volatile
  1386                           
  1387                           ;BTZGDRtx.c: 607:         PMCON2 = 0x55;
  1388  0499  3055               	movlw	85
  1389  049A  0096               	movwf	22	;volsfr
  1390                           
  1391                           ;BTZGDRtx.c: 608:         PMCON2 = 0xAA;
  1392  049B  30AA               	movlw	170
  1393  049C  0096               	movwf	22	;volsfr
  1394                           
  1395                           ;BTZGDRtx.c: 609:         PMCON1bits.WR = 1;
  1396  049D  1495               	bsf	21,1	;volatile
  1397                           
  1398                           ;BTZGDRtx.c: 610:         __nop();
  1399  049E  0000               	nop
  1400                           
  1401                           ;BTZGDRtx.c: 611:         __nop();
  1402  049F  0000               	nop
  1403                           
  1404                           ;BTZGDRtx.c: 613:         writeAddr++;
  1405  04A0  0AF3               	incf	FLASH_WriteBlock@writeAddr,f
  1406  04A1  1903               	skipnz
  1407  04A2  0AF4               	incf	FLASH_WriteBlock@writeAddr+1,f
  1408  04A3  3010               	movlw	16
  1409                           
  1410                           ;BTZGDRtx.c: 614:     }
  1411  04A4  0AFC               	incf	FLASH_WriteBlock@i,f
  1412  04A5  027C               	subwf	FLASH_WriteBlock@i,w
  1413  04A6  1C03               	skipc
  1414  04A7  2C80               	goto	l1728
  1415                           
  1416                           ;BTZGDRtx.c: 616:     PMCON1bits.WREN = 0;
  1417  04A8  0023               	movlb	3	; select bank3
  1418  04A9  1115               	bcf	21,2	;volatile
  1419                           
  1420                           ;BTZGDRtx.c: 617:     INTCONbits.GIE = GIEBitValue;
  1421  04AA  0C79               	rrf	FLASH_WriteBlock@GIEBitValue,w
  1422  04AB  2CAC               	ljmp	PL34	;call to abstracted procedure
  1423  04AC                     __end_of_FLASH_WriteBlock:	
  1424  04AC                     PL34:	
  1425  04AC  1C03               	skipc
  1426  04AD  138B               	bcf	11,7	;volatile
  1427  04AE  1803               	skipnc
  1428  04AF  178B               	bsf	11,7	;volatile
  1429  04B0  0008               	return
  1430  04B1                     __end_ofPL34:	
  1431                           
  1432                           	psect	text5
  1433  0653                     __ptext5:	
  1434 ;; *************** function _FLASH_EraseBlock *****************
  1435 ;; Defined at:
  1436 ;;		line 512 in file "BTZGDRtx.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  startAddr       2    0[COMMON] unsigned short 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 1F/0
  1447 ;;		On exit  : 1F/3
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1450 ;;      Params:         2       0       0       0
  1451 ;;      Locals:         1       0       0       0
  1452 ;;      Temps:          0       0       0       0
  1453 ;;      Totals:         3       0       0       0
  1454 ;;Total ram usage:        3 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    2
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_FLASH_WriteBlock
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           
  1465                           ;psect for function _FLASH_EraseBlock
  1466  0653                     _FLASH_EraseBlock:	
  1467                           
  1468                           ;BTZGDRtx.c: 513:     uint8_t GIEBitValue = INTCONbits.GIE;
  1469                           
  1470                           ;incstack = 0
  1471                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  1472  0653  3000               	movlw	0
  1473  0654  1B8B               	btfsc	11,7	;volatile
  1474  0655  3001               	movlw	1
  1475  0656  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  1476                           
  1477                           ;BTZGDRtx.c: 516:     INTCONbits.GIE = 0;
  1478  0657  138B               	bcf	11,7	;volatile
  1479                           
  1480                           ;BTZGDRtx.c: 518:     PMADRL = (startAddr & 0xFF);
  1481  0658  0870               	movf	FLASH_EraseBlock@startAddr,w
  1482  0659  0023               	movlb	3	; select bank3
  1483  065A  0091               	movwf	17	;volatile
  1484                           
  1485                           ;BTZGDRtx.c: 520:     PMADRH = ((startAddr & 0xFF00) >> 8);
  1486  065B  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  1487  065C  0092               	movwf	18	;volatile
  1488                           
  1489                           ;BTZGDRtx.c: 523:     PMCON1bits.CFGS = 0;
  1490  065D  1315               	bcf	21,6	;volatile
  1491                           
  1492                           ;BTZGDRtx.c: 524:     PMCON1bits.FREE = 1;
  1493  065E  1615               	bsf	21,4	;volatile
  1494                           
  1495                           ;BTZGDRtx.c: 525:     PMCON1bits.WREN = 1;
  1496  065F  1515               	bsf	21,2	;volatile
  1497                           
  1498                           ;BTZGDRtx.c: 528:     PMCON2 = 0x55;
  1499  0660  3055               	movlw	85
  1500  0661  0096               	movwf	22	;volsfr
  1501                           
  1502                           ;BTZGDRtx.c: 529:     PMCON2 = 0xAA;
  1503  0662  30AA               	movlw	170
  1504  0663  0096               	movwf	22	;volsfr
  1505                           
  1506                           ;BTZGDRtx.c: 530:     PMCON1bits.WR = 1;
  1507  0664  1495               	bsf	21,1	;volatile
  1508                           
  1509                           ;BTZGDRtx.c: 531:     __nop();
  1510  0665  0000               	nop
  1511                           
  1512                           ;BTZGDRtx.c: 532:     __nop();
  1513  0666  0000               	nop
  1514                           
  1515                           ;BTZGDRtx.c: 534:     PMCON1bits.WREN = 0;
  1516  0667  0023               	movlb	3	; select bank3
  1517  0668  1115               	bcf	21,2	;volatile
  1518                           
  1519                           ;BTZGDRtx.c: 535:     INTCONbits.GIE = GIEBitValue;
  1520  0669  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  1521  066A  2CAC               	ljmp	PL34	;call to abstracted procedure
  1522  066B                     __end_of_FLASH_EraseBlock:	
  1523                           
  1524                           	psect	text6
  1525  04B1                     __ptext6:	
  1526 ;; *************** function _counter_read *****************
  1527 ;; Defined at:
  1528 ;;		line 622 in file "BTZGDRtx.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  ctx             1    wreg     PTR struct .
  1531 ;;		 -> counter(16), 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  ctx             1   20[BANK0 ] PTR struct .
  1534 ;;		 -> counter(16), 
  1535 ;;  i               1   21[BANK0 ] unsigned char 
  1536 ;;  temp           16    4[BANK0 ] unsigned short [8]
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 1F/0
  1543 ;;		On exit  : 1C/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1546 ;;      Params:         0       0       0       0
  1547 ;;      Locals:         0      18       0       0
  1548 ;;      Temps:          3       0       0       0
  1549 ;;      Totals:         3      18       0       0
  1550 ;;Total ram usage:       21 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		_FLASH_ReadWord
  1555 ;;		_memcpy
  1556 ;;		_memset
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _counter_read
  1564  04B1                     _counter_read:	
  1565                           
  1566                           ;incstack = 0
  1567                           ; Regs used in _counter_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1568                           ;counter_read@ctx stored from wreg
  1569  04B1  00B4               	movwf	counter_read@ctx
  1570                           
  1571                           ;BTZGDRtx.c: 623:     uint16_t temp[8];;BTZGDRtx.c: 624:     memset(temp, 0x00, sizeof (
      +                          temp));
  1572  04B2  3024               	movlw	low counter_read@temp
  1573  04B3  00F0               	movwf	memset@dest
  1574  04B4  3000               	movlw	high counter_read@temp
  1575  04B5  00F1               	movwf	memset@dest+1
  1576  04B6  3010               	movlw	16
  1577  04B7  2574               	fcall	PL24	;call to abstracted procedure
  1578  04B8  229D               	fcall	_memset
  1579                           
  1580                           ;BTZGDRtx.c: 626:     for (uint8_t i = 0; i < 8; i++) {
  1581  04B9  01B5               	clrf	counter_read@i
  1582  04BA                     l2306:	
  1583                           
  1584                           ;BTZGDRtx.c: 627:         temp[i] = FLASH_ReadWord((0x7E0) + (2 * i) + 1) & 0xFF;
  1585  04BA  0835               	movf	counter_read@i,w
  1586  04BB  00F0               	movwf	FLASH_ReadWord@flashAddr
  1587  04BC  30E1               	movlw	225
  1588  04BD  24F6               	fcall	PL32	;call to abstracted procedure
  1589  04BE  2639               	fcall	_FLASH_ReadWord
  1590  04BF  24EC               	fcall	PL16	;call to abstracted procedure
  1591  04C0  3FC0               	movwi [0]fsr1
  1592  04C1  087B               	movf	??_counter_read+1,w
  1593  04C2  3FC1               	movwi [1]fsr1
  1594                           
  1595                           ;BTZGDRtx.c: 628:         temp[i] = temp[i] << 8;
  1596  04C3  3535               	lslf	counter_read@i,w
  1597  04C4  3E24               	addlw	(low (counter_read@temp| 0))& (0+255)
  1598  04C5  0086               	movwf	6
  1599  04C6  3F40               	moviw [0]fsr1
  1600  04C7  00FA               	movwf	??_counter_read
  1601  04C8  3F41               	moviw [1]fsr1
  1602  04C9  00FB               	movwf	??_counter_read+1
  1603  04CA  087A               	movf	??_counter_read,w
  1604  04CB  00FB               	movwf	??_counter_read+1
  1605  04CC  01FA               	clrf	??_counter_read
  1606  04CD  3535               	lslf	counter_read@i,w
  1607  04CE  3E24               	addlw	(low (counter_read@temp| 0))& (0+255)
  1608  04CF  0086               	movwf	6
  1609  04D0  087A               	movf	??_counter_read,w
  1610  04D1  3FC0               	movwi [0]fsr1
  1611  04D2  087B               	movf	??_counter_read+1,w
  1612  04D3  3FC1               	movwi [1]fsr1
  1613                           
  1614                           ;BTZGDRtx.c: 629:         temp[i] |= FLASH_ReadWord((0x7E0) + (2 * i)) & 0xFF;
  1615  04D4  0835               	movf	counter_read@i,w
  1616  04D5  00F0               	movwf	FLASH_ReadWord@flashAddr
  1617  04D6  30E0               	movlw	224
  1618  04D7  24F6               	fcall	PL32	;call to abstracted procedure
  1619  04D8  2639               	fcall	_FLASH_ReadWord
  1620  04D9  24EC               	fcall	PL16	;call to abstracted procedure
  1621  04DA  0481               	iorwf	1,f
  1622  04DB  3141               	addfsr 1,1
  1623  04DC  087B               	movf	??_counter_read+1,w
  1624  04DD  0481               	iorwf	1,f
  1625  04DE  3008               	movlw	8
  1626                           
  1627                           ;BTZGDRtx.c: 630:     }
  1628  04DF  0AB5               	incf	counter_read@i,f
  1629  04E0  0235               	subwf	counter_read@i,w
  1630  04E1  1C03               	skipc
  1631  04E2  2CBA               	goto	l2306
  1632                           
  1633                           ;BTZGDRtx.c: 632:     memcpy(ctx, temp, sizeof (counter_t));
  1634  04E3  3024               	movlw	low counter_read@temp
  1635  04E4  00F0               	movwf	memcpy@s1
  1636  04E5  3000               	movlw	high counter_read@temp
  1637  04E6  00F1               	movwf	memcpy@s1+1
  1638  04E7  3010               	movlw	16
  1639  04E8  00F2               	movwf	memcpy@n
  1640  04E9  01F3               	clrf	memcpy@n+1
  1641  04EA  0834               	movf	counter_read@ctx,w
  1642  04EB  2E19               	ljmp	_memcpy
  1643  04EC                     __end_of_counter_read:	
  1644  04EC                     PL16:	
  1645  04EC  0870               	movf	?_FLASH_ReadWord,w
  1646  04ED  00FA               	movwf	??_counter_read
  1647  04EE  01FB               	clrf	??_counter_read+1
  1648  04EF  0020               	movlb	0	; select bank0
  1649  04F0  3535               	lslf	counter_read@i,w
  1650  04F1  3E24               	addlw	(low (counter_read@temp| 0))& (0+255)
  1651  04F2  0086               	movwf	6
  1652  04F3  0187               	clrf	7
  1653  04F4  087A               	movf	??_counter_read,w
  1654  04F5  0008               	return
  1655  04F6                     __end_ofPL16:	
  1656  04F6                     PL32:	
  1657  04F6  01F1               	clrf	FLASH_ReadWord@flashAddr+1
  1658  04F7  35F0               	lslf	FLASH_ReadWord@flashAddr,f
  1659  04F8  0DF1               	rlf	FLASH_ReadWord@flashAddr+1,f
  1660  04F9  07F0               	addwf	FLASH_ReadWord@flashAddr,f
  1661  04FA  3007               	movlw	7
  1662  04FB  3DF1               	addwfc	FLASH_ReadWord@flashAddr+1,f
  1663  04FC  0008               	return
  1664  04FD                     __end_ofPL32:	
  1665                           
  1666                           	psect	text7
  1667  0639                     __ptext7:	
  1668 ;; *************** function _FLASH_ReadWord *****************
  1669 ;; Defined at:
  1670 ;;		line 473 in file "BTZGDRtx.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  flashAddr       2    0[COMMON] unsigned short 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2    0[COMMON] unsigned short 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0
  1679 ;; Tracked objects:
  1680 ;;		On entry : 1F/0
  1681 ;;		On exit  : 1F/3
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1684 ;;      Params:         2       0       0       0
  1685 ;;      Locals:         1       0       0       0
  1686 ;;      Temps:          0       0       0       0
  1687 ;;      Totals:         3       0       0       0
  1688 ;;Total ram usage:        3 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    2
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_counter_read
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function _FLASH_ReadWord
  1700  0639                     _FLASH_ReadWord:	
  1701                           
  1702                           ;BTZGDRtx.c: 474:     uint8_t GIEBitValue = INTCONbits.GIE;
  1703                           
  1704                           ;incstack = 0
  1705                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  1706  0639  3000               	movlw	0
  1707  063A  1B8B               	btfsc	11,7	;volatile
  1708  063B  3001               	movlw	1
  1709  063C  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  1710                           
  1711                           ;BTZGDRtx.c: 476:     INTCONbits.GIE = 0;
  1712  063D  138B               	bcf	11,7	;volatile
  1713                           
  1714                           ;BTZGDRtx.c: 477:     PMADRL = (flashAddr & 0x00FF);
  1715  063E  0870               	movf	FLASH_ReadWord@flashAddr,w
  1716  063F  0023               	movlb	3	; select bank3
  1717  0640  0091               	movwf	17	;volatile
  1718                           
  1719                           ;BTZGDRtx.c: 478:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  1720  0641  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  1721  0642  0092               	movwf	18	;volatile
  1722                           
  1723                           ;BTZGDRtx.c: 480:     PMCON1bits.CFGS = 0;
  1724  0643  1315               	bcf	21,6	;volatile
  1725                           
  1726                           ;BTZGDRtx.c: 481:     PMCON1bits.RD = 1;
  1727  0644  1415               	bsf	21,0	;volatile
  1728                           
  1729                           ;BTZGDRtx.c: 482:     __nop();
  1730  0645  0000               	nop
  1731                           
  1732                           ;BTZGDRtx.c: 483:     __nop();
  1733  0646  0000               	nop
  1734                           
  1735                           ;BTZGDRtx.c: 484:     INTCONbits.GIE = GIEBitValue;
  1736  0647  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  1737  0648  1C03               	skipc
  1738  0649  138B               	bcf	11,7	;volatile
  1739  064A  1803               	skipnc
  1740  064B  178B               	bsf	11,7	;volatile
  1741                           
  1742                           ;BTZGDRtx.c: 486:     return ((uint16_t) ((PMDATH << 8) | PMDATL));
  1743  064C  0023               	movlb	3	; select bank3
  1744  064D  0814               	movf	20,w	;volatile
  1745  064E  00F1               	movwf	?_FLASH_ReadWord+1
  1746  064F  01F0               	clrf	?_FLASH_ReadWord
  1747  0650  0813               	movf	19,w	;volatile
  1748  0651  04F0               	iorwf	?_FLASH_ReadWord,f
  1749  0652  0008               	return
  1750  0653                     __end_of_FLASH_ReadWord:	
  1751                           
  1752                           	psect	text8
  1753  06A6                     __ptext8:	
  1754 ;; *************** function _counter_inc_by_n *****************
  1755 ;; Defined at:
  1756 ;;		line 444 in file "BTZGDRtx.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  ctx             1    wreg     PTR struct .
  1759 ;;		 -> counter(16), 
  1760 ;;  val             2    3[COMMON] unsigned short 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  ctx             1    7[COMMON] PTR struct .
  1763 ;;		 -> counter(16), 
  1764 ;;  i               2    5[COMMON] unsigned short 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 1C/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1774 ;;      Params:         2       0       0       0
  1775 ;;      Locals:         3       0       0       0
  1776 ;;      Temps:          0       0       0       0
  1777 ;;      Totals:         5       0       0       0
  1778 ;;Total ram usage:        5 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    3
  1781 ;; This function calls:
  1782 ;;		_counter_inc
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _counter_inc_by_n
  1790  06A6                     _counter_inc_by_n:	
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in _counter_inc_by_n: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1794                           ;counter_inc_by_n@ctx stored from wreg
  1795  06A6  00F7               	movwf	counter_inc_by_n@ctx
  1796                           
  1797                           ;BTZGDRtx.c: 445:     for (uint16_t i = 0; i < val; i++)
  1798  06A7  01F5               	clrf	counter_inc_by_n@i
  1799  06A8  01F6               	clrf	counter_inc_by_n@i+1
  1800  06A9                     l1930:	
  1801  06A9  0874               	movf	counter_inc_by_n@val+1,w
  1802  06AA  0276               	subwf	counter_inc_by_n@i+1,w
  1803  06AB  1D03               	skipz
  1804  06AC  2EAF               	goto	u895
  1805  06AD  0873               	movf	counter_inc_by_n@val,w
  1806  06AE  0275               	subwf	counter_inc_by_n@i,w
  1807  06AF                     u895:	
  1808  06AF  1803               	btfsc	3,0
  1809  06B0  0008               	return
  1810                           
  1811                           ;BTZGDRtx.c: 446:         counter_inc(ctx);
  1812  06B1  0877               	movf	counter_inc_by_n@ctx,w
  1813  06B2  23A3               	fcall	_counter_inc
  1814  06B3  0AF5               	incf	counter_inc_by_n@i,f
  1815  06B4  1903               	skipnz
  1816  06B5  0AF6               	incf	counter_inc_by_n@i+1,f
  1817  06B6  2EA9               	goto	l1930
  1818  06B7                     __end_of_counter_inc_by_n:	
  1819                           
  1820                           	psect	text9
  1821  03A3                     __ptext9:	
  1822 ;; *************** function _counter_inc *****************
  1823 ;; Defined at:
  1824 ;;		line 404 in file "BTZGDRtx.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  ctx             1    wreg     PTR struct .
  1827 ;;		 -> counter(16), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  ctx             1    2[COMMON] PTR struct .
  1830 ;;		 -> counter(16), 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1840 ;;      Params:         0       0       0       0
  1841 ;;      Locals:         1       0       0       0
  1842 ;;      Temps:          2       0       0       0
  1843 ;;      Totals:         3       0       0       0
  1844 ;;Total ram usage:        3 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    2
  1847 ;; This function calls:
  1848 ;;		Nothing
  1849 ;; This function is called by:
  1850 ;;		_counter_inc_by_n
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           
  1855                           ;psect for function _counter_inc
  1856  03A3                     _counter_inc:	
  1857                           
  1858                           ;incstack = 0
  1859                           ; Regs used in _counter_inc: [wreg+fsr1l+fsr1h+status,2+status,0]
  1860                           ;counter_inc@ctx stored from wreg
  1861  03A3  00F2               	movwf	counter_inc@ctx
  1862                           
  1863                           ;BTZGDRtx.c: 405:     ctx->word0++;
  1864                           
  1865                           ;BTZGDRtx.c: 406:     if (ctx->word0 == 0) {
  1866  03A4  23F2               	fcall	PL2	;call to abstracted procedure
  1867  03A5  2401               	fcall	PL22	;call to abstracted procedure
  1868  03A6  1D03               	btfss	3,2
  1869  03A7  0008               	return
  1870                           
  1871                           ;BTZGDRtx.c: 407:         ctx->word1++;
  1872  03A8  0872               	movf	counter_inc@ctx,w
  1873  03A9  3E02               	addlw	2
  1874                           
  1875                           ;BTZGDRtx.c: 408:         if (ctx->word1 == 0) {
  1876  03AA  23F2               	fcall	PL2	;call to abstracted procedure
  1877  03AB  3E02               	addlw	2
  1878  03AC  2401               	fcall	PL22	;call to abstracted procedure
  1879  03AD  1D03               	btfss	3,2
  1880  03AE  0008               	return
  1881                           
  1882                           ;BTZGDRtx.c: 409:             ctx->word2++;
  1883  03AF  0872               	movf	counter_inc@ctx,w
  1884  03B0  3E04               	addlw	4
  1885                           
  1886                           ;BTZGDRtx.c: 410:             if (ctx->word2 == 0) {
  1887  03B1  23F2               	fcall	PL2	;call to abstracted procedure
  1888  03B2  3E04               	addlw	4
  1889  03B3  2401               	fcall	PL22	;call to abstracted procedure
  1890  03B4  1D03               	btfss	3,2
  1891  03B5  0008               	return
  1892                           
  1893                           ;BTZGDRtx.c: 411:                 ctx->word3++;
  1894  03B6  0872               	movf	counter_inc@ctx,w
  1895  03B7  3E06               	addlw	6
  1896                           
  1897                           ;BTZGDRtx.c: 412:                 if (ctx->word3 == 0) {
  1898  03B8  23F2               	fcall	PL2	;call to abstracted procedure
  1899  03B9  3E06               	addlw	6
  1900  03BA  2401               	fcall	PL22	;call to abstracted procedure
  1901  03BB  1D03               	btfss	3,2
  1902  03BC  0008               	return
  1903                           
  1904                           ;BTZGDRtx.c: 413:                     ctx->word4++;
  1905  03BD  0872               	movf	counter_inc@ctx,w
  1906  03BE  3E08               	addlw	8
  1907                           
  1908                           ;BTZGDRtx.c: 414:                     if (ctx->word4 == 0) {
  1909  03BF  23F2               	fcall	PL2	;call to abstracted procedure
  1910  03C0  3E08               	addlw	8
  1911  03C1  2401               	fcall	PL22	;call to abstracted procedure
  1912  03C2  1D03               	btfss	3,2
  1913  03C3  0008               	return
  1914                           
  1915                           ;BTZGDRtx.c: 415:                         ctx->word5++;
  1916  03C4  0872               	movf	counter_inc@ctx,w
  1917  03C5  3E0A               	addlw	10
  1918                           
  1919                           ;BTZGDRtx.c: 416:                         if (ctx->word5 == 0) {
  1920  03C6  23F2               	fcall	PL2	;call to abstracted procedure
  1921  03C7  3E0A               	addlw	10
  1922  03C8  2401               	fcall	PL22	;call to abstracted procedure
  1923  03C9  1D03               	btfss	3,2
  1924  03CA  0008               	return
  1925                           
  1926                           ;BTZGDRtx.c: 417:                             ctx->word6++;
  1927  03CB  0872               	movf	counter_inc@ctx,w
  1928  03CC  3E0C               	addlw	12
  1929                           
  1930                           ;BTZGDRtx.c: 418:                             if (ctx->word6 == 0) {
  1931  03CD  23F2               	fcall	PL2	;call to abstracted procedure
  1932  03CE  3E0C               	addlw	12
  1933  03CF  2401               	fcall	PL22	;call to abstracted procedure
  1934  03D0  1D03               	btfss	3,2
  1935  03D1  0008               	return
  1936                           
  1937                           ;BTZGDRtx.c: 419:                                 ctx->word7++;
  1938  03D2  0872               	movf	counter_inc@ctx,w
  1939  03D3  3E0E               	addlw	14
  1940                           
  1941                           ;BTZGDRtx.c: 420:                                 if (ctx->word7 == 0) {
  1942  03D4  23F2               	fcall	PL2	;call to abstracted procedure
  1943  03D5  3E0E               	addlw	14
  1944  03D6  2401               	fcall	PL22	;call to abstracted procedure
  1945  03D7  1D03               	btfss	3,2
  1946  03D8  0008               	return
  1947                           
  1948                           ;BTZGDRtx.c: 421:                                     ctx->word0 = 0;
  1949  03D9  0872               	movf	counter_inc@ctx,w
  1950  03DA  0086               	movwf	6
  1951  03DB  3000               	movlw	0
  1952  03DC  0187               	clrf	7
  1953  03DD  3FC0               	movwi [0]fsr1
  1954  03DE  3FC1               	movwi [1]fsr1
  1955                           
  1956                           ;BTZGDRtx.c: 422:                                     ctx->word1 = 0;
  1957  03DF  0872               	movf	counter_inc@ctx,w
  1958  03E0  3E02               	addlw	2
  1959                           
  1960                           ;BTZGDRtx.c: 423:                                     ctx->word2 = 0;
  1961  03E1  23FB               	fcall	PL14	;call to abstracted procedure
  1962  03E2  3E04               	addlw	4
  1963                           
  1964                           ;BTZGDRtx.c: 424:                                     ctx->word3 = 0;
  1965  03E3  23FB               	fcall	PL14	;call to abstracted procedure
  1966  03E4  3E06               	addlw	6
  1967                           
  1968                           ;BTZGDRtx.c: 425:                                     ctx->word4 = 0;
  1969  03E5  23FB               	fcall	PL14	;call to abstracted procedure
  1970  03E6  3E08               	addlw	8
  1971                           
  1972                           ;BTZGDRtx.c: 426:                                     ctx->word5 = 0;
  1973  03E7  23FB               	fcall	PL14	;call to abstracted procedure
  1974  03E8  3E0A               	addlw	10
  1975                           
  1976                           ;BTZGDRtx.c: 427:                                     ctx->word6 = 0;
  1977  03E9  23FB               	fcall	PL14	;call to abstracted procedure
  1978  03EA  3E0C               	addlw	12
  1979                           
  1980                           ;BTZGDRtx.c: 428:                                     ctx->word7 = 0;
  1981  03EB  23FB               	fcall	PL14	;call to abstracted procedure
  1982  03EC  3E0E               	addlw	14
  1983  03ED  0086               	movwf	6
  1984  03EE  3000               	movlw	0
  1985  03EF  3FC0               	movwi [0]fsr1
  1986  03F0  3FC1               	movwi [1]fsr1
  1987  03F1  0008               	return
  1988  03F2                     __end_of_counter_inc:	
  1989                           ;BTZGDRtx.c: 432:                     }
  1990                           
  1991  03F2                     PL2:	
  1992  03F2  0086               	movwf	6
  1993  03F3  3001               	movlw	1
  1994  03F4  0187               	clrf	7
  1995  03F5  0781               	addwf	1,f
  1996  03F6  3141               	addfsr 1,1
  1997  03F7  1803               	skipnc
  1998  03F8  0A81               	incf	1,f
  1999  03F9  0872               	movf	counter_inc@ctx,w
  2000  03FA  0008               	return
  2001  03FB                     __end_ofPL2:	
  2002  03FB                     PL14:	
  2003  03FB  0086               	movwf	6
  2004  03FC  3000               	movlw	0
  2005  03FD  3FC0               	movwi [0]fsr1
  2006  03FE  3FC1               	movwi [1]fsr1
  2007  03FF  0872               	movf	counter_inc@ctx,w
  2008  0400  0008               	return
  2009  0401                     __end_ofPL14:	
  2010  0401                     PL22:	
  2011  0401  0086               	movwf	6
  2012  0402  0187               	clrf	7
  2013  0403  0016               	moviw fsr1++
  2014  0404  0401               	iorwf	1,w
  2015  0405  0008               	return
  2016  0406                     __end_ofPL22:	
  2017                           
  2018                           	psect	text10
  2019  0024                     __ptext10:	
  2020 ;; *************** function _button_task *****************
  2021 ;; Defined at:
  2022 ;;		line 188 in file "BTZGDRtx.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  combo1_press    4    4[BANK1 ] unsigned long 
  2027 ;;  combo0_press    4    0[BANK1 ] unsigned long 
  2028 ;;  i               1    8[BANK1 ] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 1E/1
  2035 ;;		On exit  : 1E/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2038 ;;      Params:         0       0       0       0
  2039 ;;      Locals:         0       0       9       0
  2040 ;;      Temps:          0       4       0       0
  2041 ;;      Totals:         0       4       9       0
  2042 ;;Total ram usage:       13 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    5
  2045 ;; This function calls:
  2046 ;;		___bmul
  2047 ;;		_button_get_state
  2048 ;;		_memcpy
  2049 ;;		_millis
  2050 ;;		_rf_send_packet
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _button_task
  2058  0024                     _button_task:	
  2059                           
  2060                           ;BTZGDRtx.c: 190:     if ((uint32_t) (millis() - last_tick) >= 50) {
  2061                           
  2062                           ;incstack = 0
  2063                           ; Regs used in _button_task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2064  0024  26D3               	fcall	_millis
  2065  0025  0828               	movf	_last_tick^(0+128),w
  2066  0026  0270               	subwf	?_millis,w
  2067  0027  0020               	movlb	0	; select bank0
  2068  0028  00EA               	movwf	??_button_task
  2069  0029  0021               	movlb	1	; select bank1
  2070  002A  0829               	movf	(_last_tick+1)^(0+128),w
  2071  002B  3B71               	subwfb	?_millis+1,w
  2072  002C  0020               	movlb	0	; select bank0
  2073  002D  00EB               	movwf	??_button_task+1
  2074  002E  0021               	movlb	1	; select bank1
  2075  002F  082A               	movf	(_last_tick+2)^(0+128),w
  2076  0030  3B72               	subwfb	?_millis+2,w
  2077  0031  0020               	movlb	0	; select bank0
  2078  0032  00EC               	movwf	??_button_task+2
  2079  0033  0021               	movlb	1	; select bank1
  2080  0034  082B               	movf	(_last_tick+3)^(0+128),w
  2081  0035  3B73               	subwfb	?_millis+3,w
  2082  0036  0020               	movlb	0	; select bank0
  2083  0037  00ED               	movwf	??_button_task+3
  2084  0038  086D               	movf	??_button_task+3,w
  2085  0039  1D03               	btfss	3,2
  2086  003A  2845               	goto	l2194
  2087  003B  086C               	movf	??_button_task+2,w
  2088  003C  1D03               	btfss	3,2
  2089  003D  2845               	goto	l2194
  2090  003E  086B               	movf	??_button_task+1,w
  2091  003F  1D03               	btfss	3,2
  2092  0040  2845               	goto	l2194
  2093  0041  3032               	movlw	50
  2094  0042  026A               	subwf	??_button_task,w
  2095  0043  1C03               	btfss	3,0
  2096  0044  0008               	return
  2097  0045                     l2194:	
  2098                           
  2099                           ;BTZGDRtx.c: 191:         for (uint8_t i = 0; i < 4; i++) {
  2100  0045  0021               	movlb	1	; select bank1
  2101  0046  01D5               	clrf	button_task@i^(0+128)
  2102  0047                     l2200:	
  2103                           
  2104                           ;BTZGDRtx.c: 193:             if(i == 1 ){
  2105  0047  0B55               	decfsz	button_task@i^(0+128),w
  2106  0048  284A               	goto	l2204
  2107  0049  288E               	goto	l2212
  2108  004A                     l2204:	
  2109                           
  2110                           ;BTZGDRtx.c: 197:             if (button_get_state(i) == 1) {
  2111  004A  0855               	movf	button_task@i^(0+128),w
  2112  004B  25BC               	fcall	_button_get_state
  2113  004C  3A01               	xorlw	1
  2114                           
  2115                           ;BTZGDRtx.c: 199:                 button_packet[0] = buttons[i].id;
  2116  004D  300A               	movlw	10
  2117  004E  00F0               	movwf	___bmul@multiplicand
  2118  004F  1D03               	skipz
  2119  0050  2883               	goto	L3
  2120  0051  0021               	movlb	1	; select bank1
  2121  0052  0855               	movf	button_task@i^(0+128),w
  2122  0053  26C7               	fcall	___bmul
  2123  0054  3E21               	addlw	(low ((_buttons| (0+256)+1)))& (0+255)
  2124  0055  0086               	movwf	6
  2125  0056  3001               	movlw	1	; select bank2/3
  2126  0057  0087               	movwf	7
  2127  0058  0801               	movf	1,w
  2128  0059  00C8               	movwf	_button_packet^(0+128)
  2129                           
  2130                           ;BTZGDRtx.c: 201:                 if (buttons[i].pressed_time == 0) {
  2131  005A  300A               	movlw	10
  2132  005B  00F0               	movwf	___bmul@multiplicand
  2133  005C  0855               	movf	button_task@i^(0+128),w
  2134  005D  26C7               	fcall	___bmul
  2135  005E  3E22               	addlw	(low ((_buttons| (0+256)+2)))& (0+255)
  2136  005F  0086               	movwf	6
  2137  0060  3001               	movlw	1	; select bank2/3
  2138  0061  0087               	movwf	7
  2139  0062  3F40               	moviw [0]fsr1
  2140  0063  0020               	movlb	0	; select bank0
  2141  0064  00EA               	movwf	??_button_task
  2142  0065  3F41               	moviw [1]fsr1
  2143  0066  00EB               	movwf	??_button_task+1
  2144  0067  3F42               	moviw [2]fsr1
  2145  0068  00EC               	movwf	??_button_task+2
  2146  0069  3F43               	moviw [3]fsr1
  2147  006A  00ED               	movwf	??_button_task+3
  2148  006B  046C               	iorwf	??_button_task+2,w
  2149  006C  046B               	iorwf	??_button_task+1,w
  2150  006D  046A               	iorwf	??_button_task,w
  2151  006E  1D03               	skipz
  2152  006F  288E               	goto	l2212
  2153                           
  2154                           ;BTZGDRtx.c: 202:                     buttons[i].pressed_time = millis();
  2155  0070  300A               	movlw	10
  2156  0071  00F0               	movwf	___bmul@multiplicand
  2157  0072  0021               	movlb	1	; select bank1
  2158  0073  0855               	movf	button_task@i^(0+128),w
  2159  0074  26C7               	fcall	___bmul
  2160  0075  3E22               	addlw	(low ((_buttons| (0+256)+2)))& (0+255)
  2161  0076  0086               	movwf	6
  2162  0077  3001               	movlw	1	; select bank2/3
  2163  0078  0087               	movwf	7
  2164  0079  26D3               	fcall	_millis
  2165  007A  0870               	movf	?_millis,w
  2166  007B  3FC0               	movwi [0]fsr1
  2167  007C  0871               	movf	?_millis+1,w
  2168  007D  3FC1               	movwi [1]fsr1
  2169  007E  0872               	movf	?_millis+2,w
  2170  007F  3FC2               	movwi [2]fsr1
  2171  0080  0873               	movf	?_millis+3,w
  2172  0081  3FC3               	movwi [3]fsr1
  2173  0082  288E               	goto	l2212
  2174  0083                     L3:	
  2175                           ;BTZGDRtx.c: 206:                 buttons[i].pressed_time = 0;
  2176                           
  2177  0083  0021               	movlb	1	; select bank1
  2178  0084  0855               	movf	button_task@i^(0+128),w
  2179  0085  26C7               	fcall	___bmul
  2180  0086  3E22               	addlw	(low ((_buttons| (0+256)+2)))& (0+255)
  2181  0087  21BC               	fcall	PL18	;call to abstracted procedure
  2182                           
  2183                           ;BTZGDRtx.c: 207:                 buttons[i].duration = 0;
  2184  0088  300A               	movlw	10
  2185  0089  00F0               	movwf	___bmul@multiplicand
  2186  008A  0855               	movf	button_task@i^(0+128),w
  2187  008B  26C7               	fcall	___bmul
  2188  008C  3E26               	addlw	(low ((_buttons| (0+256)+6)))& (0+255)
  2189  008D  21BC               	fcall	PL18	;call to abstracted procedure
  2190  008E                     l2212:	
  2191  008E  0021               	movlb	1	; select bank1
  2192  008F  3004               	movlw	4
  2193  0090  0AD5               	incf	button_task@i^(0+128),f
  2194  0091  0255               	subwf	button_task@i^(0+128),w
  2195  0092  1C03               	skipc
  2196  0093  2847               	goto	l2200
  2197                           
  2198                           ;BTZGDRtx.c: 210:         if (buttons[0].pressed_time > 0 && buttons[1].pressed_time > 0
      +                          ) {
  2199  0094  0022               	movlb	2	; select bank2
  2200  0095  21D9               	fcall	PL40	;call to abstracted procedure
  2201  0096  1903               	skipnz
  2202  0097  28C2               	goto	l2232
  2203  0098  21DE               	fcall	PL42	;call to abstracted procedure
  2204  0099  1903               	skipnz
  2205  009A  28C2               	goto	l2232
  2206                           
  2207                           ;BTZGDRtx.c: 211:             if (combo0_pressed == 0) {
  2208  009B  0021               	movlb	1	; select bank1
  2209  009C  0827               	movf	(_combo0_pressed+3)^(0+128),w
  2210  009D  0426               	iorwf	(_combo0_pressed+2)^(0+128),w
  2211  009E  0425               	iorwf	(_combo0_pressed+1)^(0+128),w
  2212  009F  0424               	iorwf	_combo0_pressed^(0+128),w
  2213  00A0  1D03               	skipz
  2214  00A1  28AB               	goto	l132
  2215                           
  2216                           ;BTZGDRtx.c: 212:                 combo0_pressed = millis();
  2217  00A2  26D3               	fcall	_millis
  2218  00A3  0873               	movf	?_millis+3,w
  2219  00A4  00A7               	movwf	(_combo0_pressed+3)^(0+128)
  2220  00A5  0872               	movf	?_millis+2,w
  2221  00A6  00A6               	movwf	(_combo0_pressed+2)^(0+128)
  2222  00A7  0871               	movf	?_millis+1,w
  2223  00A8  00A5               	movwf	(_combo0_pressed+1)^(0+128)
  2224  00A9  0870               	movf	?_millis,w
  2225  00AA  00A4               	movwf	_combo0_pressed^(0+128)
  2226  00AB                     l132:	
  2227                           ;BTZGDRtx.c: 213:             }
  2228                           
  2229                           
  2230                           ;BTZGDRtx.c: 214:             uint32_t combo0_pressed_now = millis() - combo0_pressed;
  2231  00AB  26D3               	fcall	_millis
  2232  00AC  0873               	movf	?_millis+3,w
  2233  00AD  00D0               	movwf	(button_task@combo0_pressed_now+3)^(0+128)
  2234  00AE  0872               	movf	?_millis+2,w
  2235  00AF  00CF               	movwf	(button_task@combo0_pressed_now+2)^(0+128)
  2236  00B0  0871               	movf	?_millis+1,w
  2237  00B1  00CE               	movwf	(button_task@combo0_pressed_now+1)^(0+128)
  2238  00B2  0870               	movf	?_millis,w
  2239  00B3  00CD               	movwf	button_task@combo0_pressed_now^(0+128)
  2240  00B4  0824               	movf	_combo0_pressed^(0+128),w
  2241  00B5  02CD               	subwf	button_task@combo0_pressed_now^(0+128),f
  2242  00B6  0825               	movf	(_combo0_pressed+1)^(0+128),w
  2243  00B7  3BCE               	subwfb	(button_task@combo0_pressed_now+1)^(0+128),f
  2244  00B8  0826               	movf	(_combo0_pressed+2)^(0+128),w
  2245  00B9  3BCF               	subwfb	(button_task@combo0_pressed_now+2)^(0+128),f
  2246  00BA  0827               	movf	(_combo0_pressed+3)^(0+128),w
  2247  00BB  3BD0               	subwfb	(button_task@combo0_pressed_now+3)^(0+128),f
  2248                           
  2249                           ;BTZGDRtx.c: 215:             button_packet[0] = (0xAA);
  2250  00BC  30AA               	movlw	170
  2251  00BD  00C8               	movwf	_button_packet^(0+128)
  2252                           
  2253                           ;BTZGDRtx.c: 216:             memcpy(&button_packet[1], &combo0_pressed_now, sizeof (com
      +                          bo0_pressed_now));
  2254  00BE  30CD               	movlw	low button_task@combo0_pressed_now
  2255  00BF  00F0               	movwf	memcpy@s1
  2256  00C0  3000               	movlw	high button_task@combo0_pressed_now
  2257  00C1  291D               	goto	L1
  2258  00C2                     l2232:	
  2259                           ;BTZGDRtx.c: 218:         } else if (buttons[0].pressed_time > 0) {
  2260                           
  2261                           ;BTZGDRtx.c: 217:             rf_send_packet(button_packet, 5);
  2262                           
  2263  00C2  21D9               	fcall	PL40	;call to abstracted procedure
  2264  00C3  1903               	skipnz
  2265  00C4  28F0               	goto	l2244
  2266                           
  2267                           ;BTZGDRtx.c: 219:             combo0_pressed = 0;
  2268                           
  2269                           ;BTZGDRtx.c: 220:             button_packet[0] = buttons[0].id;
  2270  00C5  21CC               	fcall	PL30	;call to abstracted procedure
  2271  00C6  0821               	movf	(_buttons^(0+256)+1),w
  2272  00C7  0021               	movlb	1	; select bank1
  2273  00C8  00C8               	movwf	_button_packet^(0+128)
  2274                           
  2275                           ;BTZGDRtx.c: 221:             buttons[0].duration = millis() - buttons[0].pressed_time;
  2276  00C9  26D3               	fcall	_millis
  2277  00CA  0022               	movlb	2	; select bank2
  2278  00CB  0822               	movf	(_buttons^(0+256)+2),w
  2279  00CC  0270               	subwf	?_millis,w
  2280  00CD  0020               	movlb	0	; select bank0
  2281  00CE  00EA               	movwf	??_button_task
  2282  00CF  0022               	movlb	2	; select bank2
  2283  00D0  0823               	movf	((_buttons+1)^(0+256)+2),w
  2284  00D1  3B71               	subwfb	?_millis+1,w
  2285  00D2  0020               	movlb	0	; select bank0
  2286  00D3  00EB               	movwf	??_button_task+1
  2287  00D4  0022               	movlb	2	; select bank2
  2288  00D5  0824               	movf	((_buttons+2)^(0+256)+2),w
  2289  00D6  3B72               	subwfb	?_millis+2,w
  2290  00D7  0020               	movlb	0	; select bank0
  2291  00D8  00EC               	movwf	??_button_task+2
  2292  00D9  0022               	movlb	2	; select bank2
  2293  00DA  0825               	movf	((_buttons+3)^(0+256)+2),w
  2294  00DB  3B73               	subwfb	?_millis+3,w
  2295  00DC  0020               	movlb	0	; select bank0
  2296  00DD  00ED               	movwf	??_button_task+3
  2297  00DE  0022               	movlb	2	; select bank2
  2298  00DF  00A9               	movwf	((_buttons+3)^(0+256)+6)
  2299  00E0  0020               	movlb	0	; select bank0
  2300  00E1  086C               	movf	??_button_task+2,w
  2301  00E2  0022               	movlb	2	; select bank2
  2302  00E3  00A8               	movwf	((_buttons+2)^(0+256)+6)
  2303  00E4  0020               	movlb	0	; select bank0
  2304  00E5  086B               	movf	??_button_task+1,w
  2305  00E6  0022               	movlb	2	; select bank2
  2306  00E7  00A7               	movwf	((_buttons+1)^(0+256)+6)
  2307  00E8  0020               	movlb	0	; select bank0
  2308  00E9  086A               	movf	??_button_task,w
  2309  00EA  0022               	movlb	2	; select bank2
  2310  00EB  00A6               	movwf	(_buttons^(0+256)+6)
  2311                           
  2312                           ;BTZGDRtx.c: 222:             memcpy(&button_packet[1], &buttons[0].duration, sizeof (bu
      +                          ttons[0].duration));
  2313  00EC  3026               	movlw	low (_buttons+6)
  2314  00ED  00F0               	movwf	memcpy@s1
  2315  00EE  3001               	movlw	high (_buttons+6)
  2316  00EF  291D               	goto	L1
  2317  00F0                     l2244:	
  2318                           ;BTZGDRtx.c: 224:         } else if (buttons[1].pressed_time > 0) {
  2319                           
  2320                           ;BTZGDRtx.c: 223:             rf_send_packet(button_packet, 5);
  2321                           
  2322  00F0  21DE               	fcall	PL42	;call to abstracted procedure
  2323  00F1  1903               	skipnz
  2324  00F2  2923               	goto	l2256
  2325                           
  2326                           ;BTZGDRtx.c: 225:             combo0_pressed = 0;
  2327                           
  2328                           ;BTZGDRtx.c: 226:             button_packet[0] = buttons[1].id;
  2329  00F3  21CC               	fcall	PL30	;call to abstracted procedure
  2330  00F4  082B               	movf	(_buttons^(0+256)+11),w
  2331  00F5  0021               	movlb	1	; select bank1
  2332  00F6  00C8               	movwf	_button_packet^(0+128)
  2333                           
  2334                           ;BTZGDRtx.c: 227:             buttons[1].duration = millis() - buttons[1].pressed_time;
  2335  00F7  26D3               	fcall	_millis
  2336  00F8  0022               	movlb	2	; select bank2
  2337  00F9  082C               	movf	(_buttons^(0+256)+12),w
  2338  00FA  0270               	subwf	?_millis,w
  2339  00FB  0020               	movlb	0	; select bank0
  2340  00FC  00EA               	movwf	??_button_task
  2341  00FD  0022               	movlb	2	; select bank2
  2342  00FE  082D               	movf	((_buttons+1)^(0+256)+12),w
  2343  00FF  3B71               	subwfb	?_millis+1,w
  2344  0100  0020               	movlb	0	; select bank0
  2345  0101  00EB               	movwf	??_button_task+1
  2346  0102  0022               	movlb	2	; select bank2
  2347  0103  082E               	movf	((_buttons+2)^(0+256)+12),w
  2348  0104  3B72               	subwfb	?_millis+2,w
  2349  0105  0020               	movlb	0	; select bank0
  2350  0106  00EC               	movwf	??_button_task+2
  2351  0107  0022               	movlb	2	; select bank2
  2352  0108  082F               	movf	((_buttons+3)^(0+256)+12),w
  2353  0109  3B73               	subwfb	?_millis+3,w
  2354  010A  0020               	movlb	0	; select bank0
  2355  010B  00ED               	movwf	??_button_task+3
  2356  010C  0022               	movlb	2	; select bank2
  2357  010D  00B3               	movwf	((_buttons+3)^(0+256)+16)
  2358  010E  0020               	movlb	0	; select bank0
  2359  010F  086C               	movf	??_button_task+2,w
  2360  0110  0022               	movlb	2	; select bank2
  2361  0111  00B2               	movwf	((_buttons+2)^(0+256)+16)
  2362  0112  0020               	movlb	0	; select bank0
  2363  0113  086B               	movf	??_button_task+1,w
  2364  0114  0022               	movlb	2	; select bank2
  2365  0115  00B1               	movwf	((_buttons+1)^(0+256)+16)
  2366  0116  0020               	movlb	0	; select bank0
  2367  0117  086A               	movf	??_button_task,w
  2368  0118  0022               	movlb	2	; select bank2
  2369  0119  00B0               	movwf	(_buttons^(0+256)+16)
  2370                           
  2371                           ;BTZGDRtx.c: 228:             memcpy(&button_packet[1], &buttons[1].duration, sizeof (bu
      +                          ttons[1].duration));
  2372  011A  3030               	movlw	low (_buttons+16)
  2373  011B  00F0               	movwf	memcpy@s1
  2374  011C  3001               	movlw	high (_buttons+16)
  2375  011D                     L1:	
  2376  011D  21D3               	fcall	PL38	;call to abstracted procedure
  2377  011E  2619               	fcall	_memcpy
  2378                           
  2379                           ;BTZGDRtx.c: 229:             rf_send_packet(button_packet, 5);
  2380  011F  3005               	movlw	5
  2381  0120  00FB               	movwf	rf_send_packet@len
  2382  0121  30C8               	movlw	(low (_button_packet| 0))& (0+255)
  2383  0122  21ED               	fcall	_rf_send_packet
  2384  0123                     l2256:	
  2385                           
  2386                           ;BTZGDRtx.c: 232:         if (buttons[2].pressed_time > 0 && buttons[3].pressed_time > 0
      +                          ) {
  2387  0123  0022               	movlb	2	; select bank2
  2388  0124  21E3               	fcall	PL44	;call to abstracted procedure
  2389  0125  1903               	skipnz
  2390  0126  2951               	goto	l2272
  2391  0127  21E8               	fcall	PL46	;call to abstracted procedure
  2392  0128  1903               	skipnz
  2393  0129  2951               	goto	l2272
  2394                           
  2395                           ;BTZGDRtx.c: 233:             if (combo1_pressed == 0) {
  2396  012A  0021               	movlb	1	; select bank1
  2397  012B  0823               	movf	(_combo1_pressed+3)^(0+128),w
  2398  012C  0422               	iorwf	(_combo1_pressed+2)^(0+128),w
  2399  012D  0421               	iorwf	(_combo1_pressed+1)^(0+128),w
  2400  012E  0420               	iorwf	_combo1_pressed^(0+128),w
  2401  012F  1D03               	skipz
  2402  0130  293A               	goto	l138
  2403                           
  2404                           ;BTZGDRtx.c: 234:                 combo1_pressed = millis();
  2405  0131  26D3               	fcall	_millis
  2406  0132  0873               	movf	?_millis+3,w
  2407  0133  00A3               	movwf	(_combo1_pressed+3)^(0+128)
  2408  0134  0872               	movf	?_millis+2,w
  2409  0135  00A2               	movwf	(_combo1_pressed+2)^(0+128)
  2410  0136  0871               	movf	?_millis+1,w
  2411  0137  00A1               	movwf	(_combo1_pressed+1)^(0+128)
  2412  0138  0870               	movf	?_millis,w
  2413  0139  00A0               	movwf	_combo1_pressed^(0+128)
  2414  013A                     l138:	
  2415                           ;BTZGDRtx.c: 235:             }
  2416                           
  2417                           
  2418                           ;BTZGDRtx.c: 236:             uint32_t combo1_pressed_now = millis() - combo1_pressed;
  2419  013A  26D3               	fcall	_millis
  2420  013B  0873               	movf	?_millis+3,w
  2421  013C  00D4               	movwf	(button_task@combo1_pressed_now+3)^(0+128)
  2422  013D  0872               	movf	?_millis+2,w
  2423  013E  00D3               	movwf	(button_task@combo1_pressed_now+2)^(0+128)
  2424  013F  0871               	movf	?_millis+1,w
  2425  0140  00D2               	movwf	(button_task@combo1_pressed_now+1)^(0+128)
  2426  0141  0870               	movf	?_millis,w
  2427  0142  00D1               	movwf	button_task@combo1_pressed_now^(0+128)
  2428  0143  0820               	movf	_combo1_pressed^(0+128),w
  2429  0144  02D1               	subwf	button_task@combo1_pressed_now^(0+128),f
  2430  0145  0821               	movf	(_combo1_pressed+1)^(0+128),w
  2431  0146  3BD2               	subwfb	(button_task@combo1_pressed_now+1)^(0+128),f
  2432  0147  0822               	movf	(_combo1_pressed+2)^(0+128),w
  2433  0148  3BD3               	subwfb	(button_task@combo1_pressed_now+2)^(0+128),f
  2434  0149  0823               	movf	(_combo1_pressed+3)^(0+128),w
  2435  014A  3BD4               	subwfb	(button_task@combo1_pressed_now+3)^(0+128),f
  2436                           
  2437                           ;BTZGDRtx.c: 237:             button_packet[0] = (0xAB);
  2438  014B  30AB               	movlw	171
  2439  014C  00C8               	movwf	_button_packet^(0+128)
  2440                           
  2441                           ;BTZGDRtx.c: 238:             memcpy(&button_packet[1], &combo1_pressed_now, sizeof (com
      +                          bo1_pressed_now));
  2442  014D  30D1               	movlw	low button_task@combo1_pressed_now
  2443  014E  00F0               	movwf	memcpy@s1
  2444  014F  3000               	movlw	high button_task@combo1_pressed_now
  2445  0150  29AC               	goto	L2
  2446  0151                     l2272:	
  2447                           ;BTZGDRtx.c: 240:         } else if (buttons[2].pressed_time > 0) {
  2448                           
  2449                           ;BTZGDRtx.c: 239:             rf_send_packet(button_packet, 5);
  2450                           
  2451  0151  21E3               	fcall	PL44	;call to abstracted procedure
  2452  0152  1903               	skipnz
  2453  0153  297F               	goto	l2284
  2454                           
  2455                           ;BTZGDRtx.c: 241:             combo1_pressed = 0;
  2456                           
  2457                           ;BTZGDRtx.c: 242:             button_packet[0] = buttons[2].id;
  2458  0154  21C5               	fcall	PL28	;call to abstracted procedure
  2459  0155  0835               	movf	(_buttons^(0+256)+21),w
  2460  0156  0021               	movlb	1	; select bank1
  2461  0157  00C8               	movwf	_button_packet^(0+128)
  2462                           
  2463                           ;BTZGDRtx.c: 243:             buttons[2].duration = millis() - buttons[2].pressed_time;
  2464  0158  26D3               	fcall	_millis
  2465  0159  0022               	movlb	2	; select bank2
  2466  015A  0836               	movf	(_buttons^(0+256)+22),w
  2467  015B  0270               	subwf	?_millis,w
  2468  015C  0020               	movlb	0	; select bank0
  2469  015D  00EA               	movwf	??_button_task
  2470  015E  0022               	movlb	2	; select bank2
  2471  015F  0837               	movf	((_buttons+1)^(0+256)+22),w
  2472  0160  3B71               	subwfb	?_millis+1,w
  2473  0161  0020               	movlb	0	; select bank0
  2474  0162  00EB               	movwf	??_button_task+1
  2475  0163  0022               	movlb	2	; select bank2
  2476  0164  0838               	movf	((_buttons+2)^(0+256)+22),w
  2477  0165  3B72               	subwfb	?_millis+2,w
  2478  0166  0020               	movlb	0	; select bank0
  2479  0167  00EC               	movwf	??_button_task+2
  2480  0168  0022               	movlb	2	; select bank2
  2481  0169  0839               	movf	((_buttons+3)^(0+256)+22),w
  2482  016A  3B73               	subwfb	?_millis+3,w
  2483  016B  0020               	movlb	0	; select bank0
  2484  016C  00ED               	movwf	??_button_task+3
  2485  016D  0022               	movlb	2	; select bank2
  2486  016E  00BD               	movwf	((_buttons+3)^(0+256)+26)
  2487  016F  0020               	movlb	0	; select bank0
  2488  0170  086C               	movf	??_button_task+2,w
  2489  0171  0022               	movlb	2	; select bank2
  2490  0172  00BC               	movwf	((_buttons+2)^(0+256)+26)
  2491  0173  0020               	movlb	0	; select bank0
  2492  0174  086B               	movf	??_button_task+1,w
  2493  0175  0022               	movlb	2	; select bank2
  2494  0176  00BB               	movwf	((_buttons+1)^(0+256)+26)
  2495  0177  0020               	movlb	0	; select bank0
  2496  0178  086A               	movf	??_button_task,w
  2497  0179  0022               	movlb	2	; select bank2
  2498  017A  00BA               	movwf	(_buttons^(0+256)+26)
  2499                           
  2500                           ;BTZGDRtx.c: 244:             memcpy(&button_packet[1], &buttons[2].duration, sizeof (bu
      +                          ttons[2].duration));
  2501  017B  303A               	movlw	low (_buttons+26)
  2502  017C  00F0               	movwf	memcpy@s1
  2503  017D  3001               	movlw	high (_buttons+26)
  2504  017E  29AC               	goto	L2
  2505  017F                     l2284:	
  2506                           ;BTZGDRtx.c: 246:         } else if (buttons[3].pressed_time > 0) {
  2507                           
  2508                           ;BTZGDRtx.c: 245:             rf_send_packet(button_packet, 5);
  2509                           
  2510  017F  21E8               	fcall	PL46	;call to abstracted procedure
  2511  0180  1903               	skipnz
  2512  0181  29B2               	goto	l2296
  2513                           
  2514                           ;BTZGDRtx.c: 247:             combo1_pressed = 0;
  2515                           
  2516                           ;BTZGDRtx.c: 248:             button_packet[0] = buttons[3].id;
  2517  0182  21C5               	fcall	PL28	;call to abstracted procedure
  2518  0183  083F               	movf	(_buttons^(0+256)+31),w
  2519  0184  0021               	movlb	1	; select bank1
  2520  0185  00C8               	movwf	_button_packet^(0+128)
  2521                           
  2522                           ;BTZGDRtx.c: 249:             buttons[3].duration = millis() - buttons[3].pressed_time;
  2523  0186  26D3               	fcall	_millis
  2524  0187  0022               	movlb	2	; select bank2
  2525  0188  0840               	movf	(_buttons^(0+256)+32),w
  2526  0189  0270               	subwf	?_millis,w
  2527  018A  0020               	movlb	0	; select bank0
  2528  018B  00EA               	movwf	??_button_task
  2529  018C  0022               	movlb	2	; select bank2
  2530  018D  0841               	movf	((_buttons+1)^(0+256)+32),w
  2531  018E  3B71               	subwfb	?_millis+1,w
  2532  018F  0020               	movlb	0	; select bank0
  2533  0190  00EB               	movwf	??_button_task+1
  2534  0191  0022               	movlb	2	; select bank2
  2535  0192  0842               	movf	((_buttons+2)^(0+256)+32),w
  2536  0193  3B72               	subwfb	?_millis+2,w
  2537  0194  0020               	movlb	0	; select bank0
  2538  0195  00EC               	movwf	??_button_task+2
  2539  0196  0022               	movlb	2	; select bank2
  2540  0197  0843               	movf	((_buttons+3)^(0+256)+32),w
  2541  0198  3B73               	subwfb	?_millis+3,w
  2542  0199  0020               	movlb	0	; select bank0
  2543  019A  00ED               	movwf	??_button_task+3
  2544  019B  0022               	movlb	2	; select bank2
  2545  019C  00C7               	movwf	((_buttons+3)^(0+256)+36)
  2546  019D  0020               	movlb	0	; select bank0
  2547  019E  086C               	movf	??_button_task+2,w
  2548  019F  0022               	movlb	2	; select bank2
  2549  01A0  00C6               	movwf	((_buttons+2)^(0+256)+36)
  2550  01A1  0020               	movlb	0	; select bank0
  2551  01A2  086B               	movf	??_button_task+1,w
  2552  01A3  0022               	movlb	2	; select bank2
  2553  01A4  00C5               	movwf	((_buttons+1)^(0+256)+36)
  2554  01A5  0020               	movlb	0	; select bank0
  2555  01A6  086A               	movf	??_button_task,w
  2556  01A7  0022               	movlb	2	; select bank2
  2557  01A8  00C4               	movwf	(_buttons^(0+256)+36)
  2558                           
  2559                           ;BTZGDRtx.c: 250:             memcpy(&button_packet[1], &buttons[3].duration, sizeof (bu
      +                          ttons[3].duration));
  2560  01A9  3044               	movlw	low (_buttons+36)
  2561  01AA  00F0               	movwf	memcpy@s1
  2562  01AB  3001               	movlw	high (_buttons+36)
  2563  01AC                     L2:	
  2564  01AC  21D3               	fcall	PL38	;call to abstracted procedure
  2565  01AD  2619               	fcall	_memcpy
  2566                           
  2567                           ;BTZGDRtx.c: 251:             rf_send_packet(button_packet, 5);
  2568  01AE  3005               	movlw	5
  2569  01AF  00FB               	movwf	rf_send_packet@len
  2570  01B0  30C8               	movlw	(low (_button_packet| 0))& (0+255)
  2571  01B1  21ED               	fcall	_rf_send_packet
  2572  01B2                     l2296:	
  2573                           
  2574                           ;BTZGDRtx.c: 253:         last_tick = millis();
  2575  01B2  26D3               	fcall	_millis
  2576  01B3  0873               	movf	?_millis+3,w
  2577  01B4  00AB               	movwf	(_last_tick+3)^(0+128)
  2578  01B5  0872               	movf	?_millis+2,w
  2579  01B6  00AA               	movwf	(_last_tick+2)^(0+128)
  2580  01B7  0871               	movf	?_millis+1,w
  2581  01B8  00A9               	movwf	(_last_tick+1)^(0+128)
  2582  01B9  0870               	movf	?_millis,w
  2583  01BA  00A8               	movwf	_last_tick^(0+128)
  2584  01BB  0008               	return
  2585  01BC                     __end_of_button_task:	
  2586  01BC                     PL18:	
  2587  01BC  0086               	movwf	6
  2588  01BD  3001               	movlw	1	; select bank2/3
  2589  01BE  0087               	movwf	7
  2590  01BF  3000               	movlw	0
  2591  01C0  3FC0               	movwi [0]fsr1
  2592  01C1  3FC1               	movwi [1]fsr1
  2593  01C2  3FC2               	movwi [2]fsr1
  2594  01C3  3FC3               	movwi [3]fsr1
  2595  01C4  0008               	return
  2596  01C5                     __end_ofPL18:	
  2597  01C5                     PL28:	
  2598  01C5  0021               	movlb	1	; select bank1
  2599  01C6  01A0               	clrf	_combo1_pressed^(0+128)
  2600  01C7  01A1               	clrf	(_combo1_pressed+1)^(0+128)
  2601  01C8  01A2               	clrf	(_combo1_pressed+2)^(0+128)
  2602  01C9  01A3               	clrf	(_combo1_pressed+3)^(0+128)
  2603  01CA  0022               	movlb	2	; select bank2
  2604  01CB  0008               	return
  2605  01CC                     __end_ofPL28:	
  2606  01CC                     PL30:	
  2607  01CC  0021               	movlb	1	; select bank1
  2608  01CD  01A4               	clrf	_combo0_pressed^(0+128)
  2609  01CE  01A5               	clrf	(_combo0_pressed+1)^(0+128)
  2610  01CF  01A6               	clrf	(_combo0_pressed+2)^(0+128)
  2611  01D0  01A7               	clrf	(_combo0_pressed+3)^(0+128)
  2612  01D1  0022               	movlb	2	; select bank2
  2613  01D2  0008               	return
  2614  01D3                     __end_ofPL30:	
  2615  01D3                     PL38:	
  2616  01D3  00F1               	movwf	memcpy@s1+1
  2617  01D4  3004               	movlw	4
  2618  01D5  00F2               	movwf	memcpy@n
  2619  01D6  30C9               	movlw	(low ((_button_packet| 0+1)))& (0+255)
  2620  01D7  01F3               	clrf	memcpy@n+1
  2621  01D8  0008               	return
  2622  01D9                     __end_ofPL38:	
  2623  01D9                     PL40:	
  2624  01D9  0825               	movf	((_buttons+3)^(0+256)+2),w
  2625  01DA  0424               	iorwf	((_buttons+2)^(0+256)+2),w
  2626  01DB  0423               	iorwf	((_buttons+1)^(0+256)+2),w
  2627  01DC  0422               	iorwf	(_buttons^(0+256)+2),w
  2628  01DD  0008               	return
  2629  01DE                     __end_ofPL40:	
  2630  01DE                     PL42:	
  2631  01DE  082F               	movf	((_buttons+3)^(0+256)+12),w
  2632  01DF  042E               	iorwf	((_buttons+2)^(0+256)+12),w
  2633  01E0  042D               	iorwf	((_buttons+1)^(0+256)+12),w
  2634  01E1  042C               	iorwf	(_buttons^(0+256)+12),w
  2635  01E2  0008               	return
  2636  01E3                     __end_ofPL42:	
  2637  01E3                     PL44:	
  2638  01E3  0839               	movf	((_buttons+3)^(0+256)+22),w
  2639  01E4  0438               	iorwf	((_buttons+2)^(0+256)+22),w
  2640  01E5  0437               	iorwf	((_buttons+1)^(0+256)+22),w
  2641  01E6  0436               	iorwf	(_buttons^(0+256)+22),w
  2642  01E7  0008               	return
  2643  01E8                     __end_ofPL44:	
  2644  01E8                     PL46:	
  2645  01E8  0843               	movf	((_buttons+3)^(0+256)+32),w
  2646  01E9  0442               	iorwf	((_buttons+2)^(0+256)+32),w
  2647  01EA  0441               	iorwf	((_buttons+1)^(0+256)+32),w
  2648  01EB  0440               	iorwf	(_buttons^(0+256)+32),w
  2649  01EC  0008               	return
  2650  01ED                     __end_ofPL46:	
  2651                           
  2652                           	psect	text11
  2653  01ED                     __ptext11:	
  2654 ;; *************** function _rf_send_packet *****************
  2655 ;; Defined at:
  2656 ;;		line 314 in file "BTZGDRtx.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  data            1    wreg     PTR unsigned char 
  2659 ;;		 -> button_packet(5), 
  2660 ;;  len             1   11[COMMON] unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  data            1   55[BANK0 ] PTR unsigned char 
  2663 ;;		 -> button_packet(5), 
  2664 ;;  i               1   56[BANK0 ] unsigned char 
  2665 ;;  plain_msg      31   24[BANK0 ] unsigned char [31]
  2666 ;;  random_nm1      4   69[BANK0 ] unsigned long 
  2667 ;;  random_nm0      4   65[BANK0 ] unsigned long 
  2668 ;;  tx_id           4   61[BANK0 ] unsigned long 
  2669 ;;  random_nm2      4   57[BANK0 ] unsigned long 
  2670 ;;  index           1   73[BANK0 ] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  2   11[COMMON] int 
  2673 ;; Registers used:
  2674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 1C/1
  2677 ;;		On exit  : 1F/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2680 ;;      Params:         1       0       0       0
  2681 ;;      Locals:         0      50       0       0
  2682 ;;      Temps:          1       0       0       0
  2683 ;;      Totals:         2      50       0       0
  2684 ;;Total ram usage:       52 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    4
  2687 ;; This function calls:
  2688 ;;		_crc8
  2689 ;;		_memcpy
  2690 ;;		_memset
  2691 ;;		_rand
  2692 ;;		_rf_encrypt_and_send
  2693 ;;		_usart_write
  2694 ;; This function is called by:
  2695 ;;		_button_task
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function _rf_send_packet
  2701  01ED                     _rf_send_packet:	
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _rf_send_packet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2705                           ;rf_send_packet@data stored from wreg
  2706  01ED  0020               	movlb	0	; select bank0
  2707  01EE  00D7               	movwf	rf_send_packet@data
  2708                           
  2709                           ;BTZGDRtx.c: 316:     uint32_t tx_id = 0x22554411;
  2710  01EF  3022               	movlw	34
  2711  01F0  00E0               	movwf	rf_send_packet@tx_id+3
  2712  01F1  3055               	movlw	85
  2713  01F2  00DF               	movwf	rf_send_packet@tx_id+2
  2714  01F3  3044               	movlw	68
  2715  01F4  00DE               	movwf	rf_send_packet@tx_id+1
  2716  01F5  3011               	movlw	17
  2717  01F6  00DD               	movwf	rf_send_packet@tx_id
  2718                           
  2719                           ;BTZGDRtx.c: 319:     uint8_t plain_msg[31];;BTZGDRtx.c: 320:     memset(plain_msg, 0xf0
      +                          , sizeof (plain_msg));
  2720  01F7  3038               	movlw	low rf_send_packet@plain_msg
  2721  01F8  00F0               	movwf	memset@dest
  2722  01F9  3000               	movlw	high rf_send_packet@plain_msg
  2723  01FA  00F1               	movwf	memset@dest+1
  2724  01FB  30F0               	movlw	240
  2725  01FC  00F2               	movwf	memset@c
  2726  01FD  301F               	movlw	31
  2727  01FE  01F3               	clrf	memset@c+1
  2728  01FF  00F4               	movwf	memset@n
  2729  0200  01F5               	clrf	memset@n+1
  2730  0201  229D               	fcall	_memset
  2731  0202  30B0               	movlw	low _counter
  2732                           
  2733                           ;BTZGDRtx.c: 322:     index = 0;
  2734  0203  01E9               	clrf	rf_send_packet@index
  2735                           
  2736                           ;BTZGDRtx.c: 324:     memcpy(&plain_msg[index], &counter, sizeof (counter_t));
  2737  0204  00F0               	movwf	memcpy@s1
  2738  0205  3000               	movlw	high _counter
  2739  0206  00F1               	movwf	memcpy@s1+1
  2740  0207  3010               	movlw	16
  2741  0208  00F2               	movwf	memcpy@n
  2742  0209  3038               	movlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2743  020A  01F3               	clrf	memcpy@n+1
  2744  020B  2619               	fcall	_memcpy
  2745                           
  2746                           ;BTZGDRtx.c: 325:     index += sizeof (counter);
  2747  020C  3010               	movlw	16
  2748  020D  0020               	movlb	0	; select bank0
  2749  020E  07E9               	addwf	rf_send_packet@index,f
  2750                           
  2751                           ;BTZGDRtx.c: 327:     plain_msg[index++] = (uint8_t) ((tx_id >> 0)&0xFF);
  2752  020F  0869               	movf	rf_send_packet@index,w
  2753  0210  3E38               	addlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2754  0211  0086               	movwf	6
  2755  0212  3011               	movlw	17
  2756  0213  0187               	clrf	7
  2757  0214  0081               	movwf	1
  2758  0215  0AE9               	incf	rf_send_packet@index,f
  2759                           
  2760                           ;BTZGDRtx.c: 328:     plain_msg[index++] = (uint8_t) rand();
  2761  0216  2322               	fcall	_rand
  2762                           
  2763                           ;BTZGDRtx.c: 329:     plain_msg[index++] = (uint8_t) ((tx_id >> 8)&0xFF);
  2764  0217  2290               	fcall	PL4	;call to abstracted procedure
  2765  0218  085E               	movf	rf_send_packet@tx_id+1,w
  2766  0219  0081               	movwf	1
  2767  021A  0AE9               	incf	rf_send_packet@index,f
  2768                           
  2769                           ;BTZGDRtx.c: 330:     plain_msg[index++] = (uint8_t) rand();
  2770  021B  2322               	fcall	_rand
  2771                           
  2772                           ;BTZGDRtx.c: 331:     plain_msg[index++] = (uint8_t) ((tx_id >> 16)&0xFF);
  2773  021C  2290               	fcall	PL4	;call to abstracted procedure
  2774  021D  085F               	movf	rf_send_packet@tx_id+2,w
  2775  021E  0081               	movwf	1
  2776  021F  0AE9               	incf	rf_send_packet@index,f
  2777                           
  2778                           ;BTZGDRtx.c: 332:     plain_msg[index++] = (uint8_t) rand();
  2779  0220  2322               	fcall	_rand
  2780                           
  2781                           ;BTZGDRtx.c: 333:     plain_msg[index++] = (uint8_t) ((tx_id >> 24)&0xFF);
  2782  0221  2290               	fcall	PL4	;call to abstracted procedure
  2783  0222  0860               	movf	rf_send_packet@tx_id+3,w
  2784  0223  0081               	movwf	1
  2785  0224  0AE9               	incf	rf_send_packet@index,f
  2786                           
  2787                           ;BTZGDRtx.c: 334:     plain_msg[index++] = (uint8_t) rand();
  2788  0225  2322               	fcall	_rand
  2789                           
  2790                           ;BTZGDRtx.c: 336:     plain_msg[index++] = len;
  2791  0226  2290               	fcall	PL4	;call to abstracted procedure
  2792  0227  087B               	movf	rf_send_packet@len,w
  2793  0228  0081               	movwf	1
  2794  0229  0AE9               	incf	rf_send_packet@index,f
  2795                           
  2796                           ;BTZGDRtx.c: 338:     memcpy(&plain_msg[index], data, len);
  2797  022A  0857               	movf	rf_send_packet@data,w
  2798  022B  00F0               	movwf	memcpy@s1
  2799  022C  01F1               	clrf	memcpy@s1+1
  2800  022D  087B               	movf	rf_send_packet@len,w
  2801  022E  00F2               	movwf	memcpy@n
  2802  022F  01F3               	clrf	memcpy@n+1
  2803  0230  0869               	movf	rf_send_packet@index,w
  2804  0231  3E38               	addlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2805  0232  2619               	fcall	_memcpy
  2806                           
  2807                           ;BTZGDRtx.c: 339:     index += len;
  2808  0233  087B               	movf	rf_send_packet@len,w
  2809  0234  0020               	movlb	0	; select bank0
  2810  0235  07E9               	addwf	rf_send_packet@index,f
  2811                           
  2812                           ;BTZGDRtx.c: 341:     plain_msg[sizeof (plain_msg) - 1] = crc8(plain_msg, sizeof (plain_
      +                          msg) - 1);
  2813  0236  301E               	movlw	30
  2814  0237  00F0               	movwf	crc8@len
  2815  0238  3038               	movlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2816  0239  2681               	fcall	_crc8
  2817  023A  00D6               	movwf	rf_send_packet@plain_msg+30
  2818                           
  2819                           ;BTZGDRtx.c: 343:     uint32_t random_nm0 = rand();
  2820  023B  2322               	fcall	_rand
  2821  023C  0879               	movf	?_rand,w
  2822  023D  00E1               	movwf	rf_send_packet@random_nm0
  2823  023E  087A               	movf	?_rand+1,w
  2824  023F  00E2               	movwf	rf_send_packet@random_nm0+1
  2825  0240  0D89               	rlf	9,f
  2826  0241  3B89               	subwfb	9,f
  2827  0242  0989               	comf	9,f
  2828  0243  00E3               	movwf	rf_send_packet@random_nm0+2
  2829  0244  00E4               	movwf	rf_send_packet@random_nm0+3
  2830                           
  2831                           ;BTZGDRtx.c: 344:     uint32_t random_nm1 = rand();
  2832  0245  2322               	fcall	_rand
  2833  0246  0879               	movf	?_rand,w
  2834  0247  00E5               	movwf	rf_send_packet@random_nm1
  2835  0248  087A               	movf	?_rand+1,w
  2836  0249  00E6               	movwf	rf_send_packet@random_nm1+1
  2837  024A  0D89               	rlf	9,f
  2838  024B  3B89               	subwfb	9,f
  2839  024C  0989               	comf	9,f
  2840  024D  00E7               	movwf	rf_send_packet@random_nm1+2
  2841  024E  00E8               	movwf	rf_send_packet@random_nm1+3
  2842                           
  2843                           ;BTZGDRtx.c: 345:     uint32_t random_nm2 = rand();
  2844  024F  2322               	fcall	_rand
  2845  0250  0879               	movf	?_rand,w
  2846  0251  00D9               	movwf	rf_send_packet@random_nm2
  2847  0252  087A               	movf	?_rand+1,w
  2848  0253  00DA               	movwf	rf_send_packet@random_nm2+1
  2849  0254  0D89               	rlf	9,f
  2850  0255  3B89               	subwfb	9,f
  2851  0256  0989               	comf	9,f
  2852  0257  00DB               	movwf	rf_send_packet@random_nm2+2
  2853  0258  00DC               	movwf	rf_send_packet@random_nm2+3
  2854                           
  2855                           ;BTZGDRtx.c: 347:     usart_write(0xF0);
  2856  0259  30F0               	movlw	240
  2857  025A  26DD               	fcall	_usart_write
  2858                           
  2859                           ;BTZGDRtx.c: 348:     usart_write(random_nm0 >> 0);
  2860  025B  0020               	movlb	0	; select bank0
  2861  025C  0861               	movf	rf_send_packet@random_nm0,w
  2862  025D  26DD               	fcall	_usart_write
  2863                           
  2864                           ;BTZGDRtx.c: 349:     usart_write(random_nm0 >> 8);
  2865  025E  0020               	movlb	0	; select bank0
  2866  025F  0862               	movf	rf_send_packet@random_nm0+1,w
  2867  0260  26DD               	fcall	_usart_write
  2868                           
  2869                           ;BTZGDRtx.c: 350:     usart_write(random_nm0 >> 16);
  2870  0261  0020               	movlb	0	; select bank0
  2871  0262  0863               	movf	rf_send_packet@random_nm0+2,w
  2872  0263  26DD               	fcall	_usart_write
  2873                           
  2874                           ;BTZGDRtx.c: 352:     usart_write(0xFE);
  2875  0264  30FE               	movlw	254
  2876  0265  26DD               	fcall	_usart_write
  2877                           
  2878                           ;BTZGDRtx.c: 353:     usart_write(random_nm1 >> 0);
  2879  0266  0020               	movlb	0	; select bank0
  2880  0267  0865               	movf	rf_send_packet@random_nm1,w
  2881  0268  26DD               	fcall	_usart_write
  2882                           
  2883                           ;BTZGDRtx.c: 354:     usart_write(random_nm1 >> 8);
  2884  0269  0020               	movlb	0	; select bank0
  2885  026A  0866               	movf	rf_send_packet@random_nm1+1,w
  2886  026B  26DD               	fcall	_usart_write
  2887                           
  2888                           ;BTZGDRtx.c: 355:     usart_write(random_nm1 >> 16);
  2889  026C  0020               	movlb	0	; select bank0
  2890  026D  0867               	movf	rf_send_packet@random_nm1+2,w
  2891  026E  26DD               	fcall	_usart_write
  2892                           
  2893                           ;BTZGDRtx.c: 357:     usart_write(0x5A);
  2894  026F  305A               	movlw	90
  2895  0270  26DD               	fcall	_usart_write
  2896                           
  2897                           ;BTZGDRtx.c: 358:     usart_write(random_nm2 >> 0);
  2898  0271  0020               	movlb	0	; select bank0
  2899  0272  0859               	movf	rf_send_packet@random_nm2,w
  2900  0273  26DD               	fcall	_usart_write
  2901                           
  2902                           ;BTZGDRtx.c: 359:     usart_write(random_nm2 >> 8);
  2903  0274  0020               	movlb	0	; select bank0
  2904  0275  085A               	movf	rf_send_packet@random_nm2+1,w
  2905  0276  26DD               	fcall	_usart_write
  2906                           
  2907                           ;BTZGDRtx.c: 360:     usart_write((random_nm0 >> 0)+(random_nm0 >> 8)+(random_nm0 >> 16)
      +                          +
  2908  0277  0020               	movlb	0	; select bank0
  2909  0278  0862               	movf	rf_send_packet@random_nm0+1,w
  2910  0279  0763               	addwf	rf_send_packet@random_nm0+2,w
  2911  027A  0766               	addwf	rf_send_packet@random_nm1+1,w
  2912  027B  0767               	addwf	rf_send_packet@random_nm1+2,w
  2913  027C  075A               	addwf	rf_send_packet@random_nm2+1,w
  2914  027D  0761               	addwf	rf_send_packet@random_nm0,w
  2915  027E  0765               	addwf	rf_send_packet@random_nm1,w
  2916  027F  0759               	addwf	rf_send_packet@random_nm2,w
  2917  0280  26DD               	fcall	_usart_write
  2918                           
  2919                           ;BTZGDRtx.c: 366:     for (uint8_t i = 0; i < sizeof (plain_msg); i++) {
  2920  0281  0020               	movlb	0	; select bank0
  2921  0282  01D8               	clrf	rf_send_packet@i
  2922  0283                     l2174:	
  2923                           
  2924                           ;BTZGDRtx.c: 367:         rf_encrypt_and_send(plain_msg[i]);
  2925  0283  0858               	movf	rf_send_packet@i,w
  2926  0284  3E38               	addlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2927  0285  0086               	movwf	6
  2928  0286  0187               	clrf	7
  2929  0287  0801               	movf	1,w
  2930  0288  266B               	fcall	_rf_encrypt_and_send
  2931                           
  2932                           ;BTZGDRtx.c: 368:     }
  2933  0289  0020               	movlb	0	; select bank0
  2934  028A  301F               	movlw	31
  2935  028B  0AD8               	incf	rf_send_packet@i,f
  2936  028C  0258               	subwf	rf_send_packet@i,w
  2937  028D  1803               	btfsc	3,0
  2938  028E  0008               	return
  2939  028F  2A83               	goto	l2174
  2940  0290                     __end_of_rf_send_packet:	
  2941  0290                     PL4:	
  2942  0290  0879               	movf	?_rand,w
  2943  0291  00FC               	movwf	??_rf_send_packet
  2944  0292  0869               	movf	rf_send_packet@index,w
  2945  0293  3E38               	addlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2946  0294  0086               	movwf	6
  2947  0295  0187               	clrf	7
  2948  0296  087C               	movf	??_rf_send_packet,w
  2949  0297  0081               	movwf	1
  2950  0298  0AE9               	incf	rf_send_packet@index,f
  2951  0299  0869               	movf	rf_send_packet@index,w
  2952  029A  3E38               	addlw	(low (rf_send_packet@plain_msg| 0))& (0+255)
  2953  029B  0086               	movwf	6
  2954  029C  0008               	return
  2955  029D                     __end_ofPL4:	
  2956                           
  2957                           	psect	text12
  2958  066B                     __ptext12:	
  2959 ;; *************** function _rf_encrypt_and_send *****************
  2960 ;; Defined at:
  2961 ;;		line 277 in file "BTZGDRtx.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  data            1    wreg     unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  data            1    1[COMMON] unsigned char 
  2966 ;;  enc             2    2[COMMON] unsigned char [2]
  2967 ;;  mbyte           1    4[COMMON] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 1F/0
  2974 ;;		On exit  : 1F/3
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2977 ;;      Params:         0       0       0       0
  2978 ;;      Locals:         4       0       0       0
  2979 ;;      Temps:          0       0       0       0
  2980 ;;      Totals:         4       0       0       0
  2981 ;;Total ram usage:        4 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    3
  2984 ;; This function calls:
  2985 ;;		_usart_write
  2986 ;; This function is called by:
  2987 ;;		_rf_send_packet
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _rf_encrypt_and_send
  2993  066B                     _rf_encrypt_and_send:	
  2994                           
  2995                           ;incstack = 0
  2996                           ; Regs used in _rf_encrypt_and_send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2997                           ;rf_encrypt_and_send@data stored from wreg
  2998  066B  00F1               	movwf	rf_encrypt_and_send@data
  2999  066C  3A0A               	xorlw	10
  3000  066D  00F4               	movwf	rf_encrypt_and_send@mbyte
  3001                           
  3002                           ;BTZGDRtx.c: 280:     enc[0] = bit_convt_4to6[mbyte >> 4];
  3003  066E  0E74               	swapf	rf_encrypt_and_send@mbyte,w
  3004  066F  2678               	fcall	PL20	;call to abstracted procedure
  3005  0670  00F2               	movwf	rf_encrypt_and_send@enc
  3006                           
  3007                           ;BTZGDRtx.c: 281:     enc[1] = bit_convt_4to6[mbyte & 0x0f];
  3008  0671  0874               	movf	rf_encrypt_and_send@mbyte,w
  3009  0672  2678               	fcall	PL20	;call to abstracted procedure
  3010  0673  00F3               	movwf	rf_encrypt_and_send@enc+1
  3011                           
  3012                           ;BTZGDRtx.c: 282:     usart_write(enc[0]);
  3013  0674  0872               	movf	rf_encrypt_and_send@enc,w
  3014  0675  26DD               	fcall	_usart_write
  3015                           
  3016                           ;BTZGDRtx.c: 283:     usart_write(enc[1]);
  3017  0676  0873               	movf	rf_encrypt_and_send@enc+1,w
  3018  0677  2EDD               	ljmp	_usart_write
  3019  0678                     __end_of_rf_encrypt_and_send:	
  3020  0678                     PL20:	
  3021  0678  390F               	andlw	15
  3022  0679  3EB7               	addlw	low (_bit_convt_4to6| (0+32768))
  3023  067A  0084               	movwf	4
  3024  067B  3086               	movlw	high (_bit_convt_4to6| (0+32768))
  3025  067C  1803               	skipnc
  3026  067D  3E01               	addlw	1
  3027  067E  0085               	movwf	5
  3028  067F  0800               	movf	0,w	;code access
  3029  0680  0008               	return
  3030  0681                     __end_ofPL20:	
  3031                           
  3032                           	psect	text13
  3033  06DD                     __ptext13:	
  3034 ;; *************** function _usart_write *****************
  3035 ;; Defined at:
  3036 ;;		line 261 in file "BTZGDRtx.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  data            1    wreg     unsigned char 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  data            1    0[COMMON] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg
  3045 ;; Tracked objects:
  3046 ;;		On entry : 1C/0
  3047 ;;		On exit  : 1F/3
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3050 ;;      Params:         0       0       0       0
  3051 ;;      Locals:         1       0       0       0
  3052 ;;      Temps:          0       0       0       0
  3053 ;;      Totals:         1       0       0       0
  3054 ;;Total ram usage:        1 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    2
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_rf_encrypt_and_send
  3061 ;;		_rf_send_packet
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _usart_write
  3067  06DD                     _usart_write:	
  3068                           
  3069                           ;incstack = 0
  3070                           ; Regs used in _usart_write: [wreg]
  3071                           ;usart_write@data stored from wreg
  3072  06DD  00F0               	movwf	usart_write@data
  3073  06DE                     l146:	
  3074                           ;BTZGDRtx.c: 263:     }
  3075                           
  3076                           
  3077                           ;BTZGDRtx.c: 262:     while (0 == PIR1bits.TXIF) {
  3078  06DE  0020               	movlb	0	; select bank0
  3079  06DF  1E11               	btfss	17,4	;volatile
  3080  06E0  2EDE               	goto	l146
  3081                           
  3082                           ;BTZGDRtx.c: 265:     TXREG = data;
  3083  06E1  0870               	movf	usart_write@data,w
  3084  06E2  0023               	movlb	3	; select bank3
  3085  06E3  009A               	movwf	26	;volatile
  3086  06E4  0008               	return
  3087  06E5                     __end_of_usart_write:	
  3088                           
  3089                           	psect	text14
  3090  0322                     __ptext14:	
  3091 ;; *************** function _rand *****************
  3092 ;; Defined at:
  3093 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\rand.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;		None
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  2    9[COMMON] int 
  3100 ;; Registers used:
  3101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 1F/0
  3104 ;;		On exit  : 1F/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3107 ;;      Params:         2       0       0       0
  3108 ;;      Locals:         0       0       0       0
  3109 ;;      Temps:          0       8       0       0
  3110 ;;      Totals:         2       8       0       0
  3111 ;;Total ram usage:       10 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    3
  3114 ;; This function calls:
  3115 ;;		___omul
  3116 ;; This function is called by:
  3117 ;;		_rf_send_packet
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           
  3122                           ;psect for function _rand
  3123  0322                     _rand:	
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in _rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3127  0322  0021               	movlb	1	; select bank1
  3128  0323  0840               	movf	_seed^(0+128),w
  3129  0324  0020               	movlb	0	; select bank0
  3130  0325  00A0               	movwf	___omul@multiplier
  3131  0326  0021               	movlb	1	; select bank1
  3132  0327  0841               	movf	(_seed+1)^(0+128),w
  3133  0328  0020               	movlb	0	; select bank0
  3134  0329  00A1               	movwf	___omul@multiplier+1
  3135  032A  0021               	movlb	1	; select bank1
  3136  032B  0842               	movf	(_seed+2)^(0+128),w
  3137  032C  0020               	movlb	0	; select bank0
  3138  032D  00A2               	movwf	___omul@multiplier+2
  3139  032E  0021               	movlb	1	; select bank1
  3140  032F  0843               	movf	(_seed+3)^(0+128),w
  3141  0330  0020               	movlb	0	; select bank0
  3142  0331  00A3               	movwf	___omul@multiplier+3
  3143  0332  0021               	movlb	1	; select bank1
  3144  0333  0844               	movf	(_seed+4)^(0+128),w
  3145  0334  0020               	movlb	0	; select bank0
  3146  0335  00A4               	movwf	___omul@multiplier+4
  3147  0336  0021               	movlb	1	; select bank1
  3148  0337  0845               	movf	(_seed+5)^(0+128),w
  3149  0338  0020               	movlb	0	; select bank0
  3150  0339  00A5               	movwf	___omul@multiplier+5
  3151  033A  0021               	movlb	1	; select bank1
  3152  033B  0846               	movf	(_seed+6)^(0+128),w
  3153  033C  0020               	movlb	0	; select bank0
  3154  033D  00A6               	movwf	___omul@multiplier+6
  3155  033E  0021               	movlb	1	; select bank1
  3156  033F  0847               	movf	(_seed+7)^(0+128),w
  3157  0340  0020               	movlb	0	; select bank0
  3158  0341  00A7               	movwf	___omul@multiplier+7
  3159  0342  3058               	movlw	88
  3160  0343  00AF               	movwf	___omul@multiplicand+7
  3161  0344  3051               	movlw	81
  3162  0345  00AE               	movwf	___omul@multiplicand+6
  3163  0346  30F4               	movlw	244
  3164  0347  00AD               	movwf	___omul@multiplicand+5
  3165  0348  302D               	movlw	45
  3166  0349  00AC               	movwf	___omul@multiplicand+4
  3167  034A  304C               	movlw	76
  3168  034B  00AB               	movwf	___omul@multiplicand+3
  3169  034C  3095               	movlw	149
  3170  034D  00AA               	movwf	___omul@multiplicand+2
  3171  034E  307F               	movlw	127
  3172  034F  00A9               	movwf	___omul@multiplicand+1
  3173  0350  302D               	movlw	45
  3174  0351  00A8               	movwf	___omul@multiplicand
  3175  0352  24FD               	fcall	___omul
  3176  0353  0820               	movf	?___omul,w
  3177  0354  0021               	movlb	1	; select bank1
  3178  0355  00C0               	movwf	_seed^(0+128)
  3179  0356  0020               	movlb	0	; select bank0
  3180  0357  0821               	movf	?___omul+1,w
  3181  0358  0021               	movlb	1	; select bank1
  3182  0359  00C1               	movwf	(_seed+1)^(0+128)
  3183  035A  0020               	movlb	0	; select bank0
  3184  035B  0822               	movf	?___omul+2,w
  3185  035C  0021               	movlb	1	; select bank1
  3186  035D  00C2               	movwf	(_seed+2)^(0+128)
  3187  035E  0020               	movlb	0	; select bank0
  3188  035F  0823               	movf	?___omul+3,w
  3189  0360  0021               	movlb	1	; select bank1
  3190  0361  00C3               	movwf	(_seed+3)^(0+128)
  3191  0362  0020               	movlb	0	; select bank0
  3192  0363  0824               	movf	?___omul+4,w
  3193  0364  0021               	movlb	1	; select bank1
  3194  0365  00C4               	movwf	(_seed+4)^(0+128)
  3195  0366  0020               	movlb	0	; select bank0
  3196  0367  0825               	movf	?___omul+5,w
  3197  0368  0021               	movlb	1	; select bank1
  3198  0369  00C5               	movwf	(_seed+5)^(0+128)
  3199  036A  0020               	movlb	0	; select bank0
  3200  036B  0826               	movf	?___omul+6,w
  3201  036C  0021               	movlb	1	; select bank1
  3202  036D  00C6               	movwf	(_seed+6)^(0+128)
  3203  036E  0020               	movlb	0	; select bank0
  3204  036F  0827               	movf	?___omul+7,w
  3205  0370  0021               	movlb	1	; select bank1
  3206  0371  00C7               	movwf	(_seed+7)^(0+128)
  3207  0372  3001               	movlw	1
  3208  0373  07C0               	addwf	_seed^(0+128),f
  3209  0374  3000               	movlw	0
  3210  0375  3DC1               	addwfc	(_seed+1)^(0+128),f
  3211  0376  3DC2               	addwfc	(_seed+2)^(0+128),f
  3212  0377  3DC3               	addwfc	(_seed+3)^(0+128),f
  3213  0378  3DC4               	addwfc	(_seed+4)^(0+128),f
  3214  0379  3DC5               	addwfc	(_seed+5)^(0+128),f
  3215  037A  3DC6               	addwfc	(_seed+6)^(0+128),f
  3216  037B  3DC7               	addwfc	(_seed+7)^(0+128),f
  3217  037C  30C0               	movlw	low _seed
  3218  037D  0086               	movwf	6
  3219  037E  3000               	movlw	high _seed
  3220  037F  0087               	movwf	7
  3221  0380  3F40               	moviw [0]fsr1
  3222  0381  0020               	movlb	0	; select bank0
  3223  0382  00B0               	movwf	??_rand
  3224  0383  3F41               	moviw [1]fsr1
  3225  0384  00B1               	movwf	??_rand+1
  3226  0385  3F42               	moviw [2]fsr1
  3227  0386  00B2               	movwf	??_rand+2
  3228  0387  3F43               	moviw [3]fsr1
  3229  0388  00B3               	movwf	??_rand+3
  3230  0389  3F44               	moviw [4]fsr1
  3231  038A  00B4               	movwf	??_rand+4
  3232  038B  3F45               	moviw [5]fsr1
  3233  038C  00B5               	movwf	??_rand+5
  3234  038D  3F46               	moviw [6]fsr1
  3235  038E  00B6               	movwf	??_rand+6
  3236  038F  3F47               	moviw [7]fsr1
  3237  0390  00B7               	movwf	??_rand+7
  3238  0391  3007               	movlw	7
  3239  0392                     u595:	
  3240  0392  0020               	movlb	0	; select bank0
  3241  0393  36B7               	lsrf	??_rand+7,f
  3242  0394  0CB6               	rrf	??_rand+6,f
  3243  0395  0CB5               	rrf	??_rand+5,f
  3244  0396  0CB4               	rrf	??_rand+4,f
  3245  0397  0CB3               	rrf	??_rand+3,f
  3246  0398  0CB2               	rrf	??_rand+2,f
  3247  0399  0CB1               	rrf	??_rand+1,f
  3248  039A  0CB0               	rrf	??_rand,f
  3249  039B  0B89               	decfsz	9,f
  3250  039C  2B92               	goto	u595
  3251  039D  0020               	movlb	0	; select bank0
  3252  039E  0831               	movf	??_rand+1,w
  3253  039F  00FA               	movwf	?_rand+1
  3254  03A0  0830               	movf	??_rand,w
  3255  03A1  00F9               	movwf	?_rand
  3256  03A2  0008               	return
  3257  03A3                     __end_of_rand:	
  3258                           
  3259                           	psect	text15
  3260  04FD                     __ptext15:	
  3261 ;; *************** function ___omul *****************
  3262 ;; Defined at:
  3263 ;;		line 91 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul64.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  3266 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  product         8    1[COMMON] unsigned long long 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  8    0[BANK0 ] unsigned long long 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3273 ;; Tracked objects:
  3274 ;;		On entry : 1F/0
  3275 ;;		On exit  : 1F/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3278 ;;      Params:         0      16       0       0
  3279 ;;      Locals:         8       0       0       0
  3280 ;;      Temps:          1       0       0       0
  3281 ;;      Totals:         9      16       0       0
  3282 ;;Total ram usage:       25 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    2
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_rand
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           
  3293                           ;psect for function ___omul
  3294  04FD                     ___omul:	
  3295                           
  3296                           ;incstack = 0
  3297                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  3298  04FD  3071               	movlw	low ___omul@product
  3299  04FE  0086               	movwf	6
  3300  04FF  3000               	movlw	high ___omul@product
  3301  0500  0087               	movwf	7
  3302  0501  3008               	movlw	8
  3303  0502  00F0               	movwf	??___omul
  3304  0503  3000               	movlw	0
  3305  0504                     u490:	
  3306  0504  001E               	movwi fsr1++
  3307  0505  0BF0               	decfsz	??___omul,f
  3308  0506  2D04               	goto	u490
  3309  0507                     l1410:	
  3310  0507  1C20               	btfss	___omul@multiplier,0
  3311  0508  2D19               	goto	l1414
  3312  0509  0828               	movf	___omul@multiplicand,w
  3313  050A  07F1               	addwf	___omul@product,f
  3314  050B  0829               	movf	___omul@multiplicand+1,w
  3315  050C  3DF2               	addwfc	___omul@product+1,f
  3316  050D  082A               	movf	___omul@multiplicand+2,w
  3317  050E  3DF3               	addwfc	___omul@product+2,f
  3318  050F  082B               	movf	___omul@multiplicand+3,w
  3319  0510  3DF4               	addwfc	___omul@product+3,f
  3320  0511  082C               	movf	___omul@multiplicand+4,w
  3321  0512  3DF5               	addwfc	___omul@product+4,f
  3322  0513  082D               	movf	___omul@multiplicand+5,w
  3323  0514  3DF6               	addwfc	___omul@product+5,f
  3324  0515  082E               	movf	___omul@multiplicand+6,w
  3325  0516  3DF7               	addwfc	___omul@product+6,f
  3326  0517  082F               	movf	___omul@multiplicand+7,w
  3327  0518  3DF8               	addwfc	___omul@product+7,f
  3328  0519                     l1414:	
  3329  0519  35A8               	lslf	___omul@multiplicand,f
  3330  051A  0DA9               	rlf	___omul@multiplicand+1,f
  3331  051B  0DAA               	rlf	___omul@multiplicand+2,f
  3332  051C  0DAB               	rlf	___omul@multiplicand+3,f
  3333  051D  0DAC               	rlf	___omul@multiplicand+4,f
  3334  051E  0DAD               	rlf	___omul@multiplicand+5,f
  3335  051F  0DAE               	rlf	___omul@multiplicand+6,f
  3336  0520  0DAF               	rlf	___omul@multiplicand+7,f
  3337  0521  36A7               	lsrf	___omul@multiplier+7,f
  3338  0522  0CA6               	rrf	___omul@multiplier+6,f
  3339  0523  0CA5               	rrf	___omul@multiplier+5,f
  3340  0524  0CA4               	rrf	___omul@multiplier+4,f
  3341  0525  0CA3               	rrf	___omul@multiplier+3,f
  3342  0526  0CA2               	rrf	___omul@multiplier+2,f
  3343  0527  0CA1               	rrf	___omul@multiplier+1,f
  3344  0528  0CA0               	rrf	___omul@multiplier,f
  3345  0529  0820               	movf	___omul@multiplier,w
  3346  052A  0421               	iorwf	___omul@multiplier+1,w
  3347  052B  0422               	iorwf	___omul@multiplier+2,w
  3348  052C  0423               	iorwf	___omul@multiplier+3,w
  3349  052D  0424               	iorwf	___omul@multiplier+4,w
  3350  052E  0425               	iorwf	___omul@multiplier+5,w
  3351  052F  0426               	iorwf	___omul@multiplier+6,w
  3352  0530  0427               	iorwf	___omul@multiplier+7,w
  3353  0531  1D03               	skipz
  3354  0532  2D07               	goto	l1410
  3355  0533  0871               	movf	___omul@product,w
  3356  0534  00A0               	movwf	?___omul
  3357  0535  0872               	movf	___omul@product+1,w
  3358  0536  00A1               	movwf	?___omul+1
  3359  0537  0873               	movf	___omul@product+2,w
  3360  0538  00A2               	movwf	?___omul+2
  3361  0539  0874               	movf	___omul@product+3,w
  3362  053A  00A3               	movwf	?___omul+3
  3363  053B  0875               	movf	___omul@product+4,w
  3364  053C  00A4               	movwf	?___omul+4
  3365  053D  0876               	movf	___omul@product+5,w
  3366  053E  00A5               	movwf	?___omul+5
  3367  053F  0877               	movf	___omul@product+6,w
  3368  0540  00A6               	movwf	?___omul+6
  3369  0541  0878               	movf	___omul@product+7,w
  3370  0542  00A7               	movwf	?___omul+7
  3371  0543  0008               	return
  3372  0544                     __end_of___omul:	
  3373                           
  3374                           	psect	text16
  3375  0619                     __ptext16:	
  3376 ;; *************** function _memcpy *****************
  3377 ;; Defined at:
  3378 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  d1              1    wreg     PTR void 
  3381 ;;		 -> counter(16), rf_send_packet@plain_msg(31), button_packet(5), 
  3382 ;;  s1              2    0[COMMON] PTR const void 
  3383 ;;		 -> counter_read@temp(16), counter(16), button_task@combo1_pressed_now(4), button_task@combo0_pressed_now(4), 
  3384 ;;		 -> buttons.duration(4), button_packet(5), buttons(40), 
  3385 ;;  n               2    2[COMMON] unsigned int 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  d1              1    8[COMMON] PTR void 
  3388 ;;		 -> counter(16), rf_send_packet@plain_msg(31), button_packet(5), 
  3389 ;;  s               2    5[COMMON] PTR const unsigned char 
  3390 ;;		 -> counter_read@temp(16), counter(16), button_task@combo1_pressed_now(4), button_task@combo0_pressed_now(4), 
  3391 ;;		 -> buttons.duration(4), button_packet(5), buttons(40), 
  3392 ;;  d               1    7[COMMON] PTR unsigned char 
  3393 ;;		 -> counter(16), rf_send_packet@plain_msg(31), button_packet(5), 
  3394 ;;  tmp             1    4[COMMON] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      PTR void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 1C/0
  3401 ;;		On exit  : 1C/0
  3402 ;;		Unchanged: 1C/0
  3403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3404 ;;      Params:         4       0       0       0
  3405 ;;      Locals:         5       0       0       0
  3406 ;;      Temps:          0       0       0       0
  3407 ;;      Totals:         9       0       0       0
  3408 ;;Total ram usage:        9 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    2
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_button_task
  3415 ;;		_rf_send_packet
  3416 ;;		_counter_read
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _memcpy
  3422  0619                     _memcpy:	
  3423                           
  3424                           ;incstack = 0
  3425                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  3426                           ;memcpy@d1 stored from wreg
  3427  0619  00F8               	movwf	memcpy@d1
  3428  061A  0871               	movf	memcpy@s1+1,w
  3429  061B  00F6               	movwf	memcpy@s+1
  3430  061C  0870               	movf	memcpy@s1,w
  3431  061D  00F5               	movwf	memcpy@s
  3432  061E  0878               	movf	memcpy@d1,w
  3433  061F  00F7               	movwf	memcpy@d
  3434  0620                     l2086:	
  3435  0620  3001               	movlw	1
  3436  0621  02F2               	subwf	memcpy@n,f
  3437  0622  3000               	movlw	0
  3438  0623  3BF3               	subwfb	memcpy@n+1,f
  3439  0624  0F72               	incfsz	memcpy@n,w
  3440  0625  2E29               	goto	l2080
  3441  0626  0A73               	incf	memcpy@n+1,w
  3442  0627  1903               	btfsc	3,2
  3443  0628  0008               	return
  3444  0629                     l2080:	
  3445  0629  0875               	movf	memcpy@s,w
  3446  062A  0086               	movwf	6
  3447  062B  0876               	movf	memcpy@s+1,w
  3448  062C  0087               	movwf	7
  3449  062D  0801               	movf	1,w
  3450  062E  00F4               	movwf	memcpy@tmp
  3451  062F  0AF5               	incf	memcpy@s,f
  3452  0630  1903               	skipnz
  3453  0631  0AF6               	incf	memcpy@s+1,f
  3454  0632  0877               	movf	memcpy@d,w
  3455  0633  0086               	movwf	6
  3456  0634  0187               	clrf	7
  3457  0635  0874               	movf	memcpy@tmp,w
  3458  0636  0081               	movwf	1
  3459  0637  0AF7               	incf	memcpy@d,f
  3460  0638  2E20               	goto	l2086
  3461  0639                     __end_of_memcpy:	
  3462                           
  3463                           	psect	text17
  3464  0681                     __ptext17:	
  3465 ;; *************** function _crc8 *****************
  3466 ;; Defined at:
  3467 ;;		line 299 in file "BTZGDRtx.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  buffer          1    wreg     PTR unsigned char 
  3470 ;;		 -> rf_send_packet@plain_msg(31), 
  3471 ;;  len             1    0[COMMON] unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  buffer          1    2[COMMON] PTR unsigned char 
  3474 ;;		 -> rf_send_packet@plain_msg(31), 
  3475 ;;  i               1    3[COMMON] unsigned char 
  3476 ;;  crc             1    4[COMMON] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      unsigned char 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 1F/0
  3483 ;;		On exit  : 1F/0
  3484 ;;		Unchanged: 1F/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3486 ;;      Params:         1       0       0       0
  3487 ;;      Locals:         3       0       0       0
  3488 ;;      Temps:          1       0       0       0
  3489 ;;      Totals:         5       0       0       0
  3490 ;;Total ram usage:        5 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    2
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_rf_send_packet
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _crc8
  3502  0681                     _crc8:	
  3503                           
  3504                           ;incstack = 0
  3505                           ; Regs used in _crc8: [wreg+fsr1l+fsr1h+status,2+status,0]
  3506                           ;crc8@buffer stored from wreg
  3507  0681  00F2               	movwf	crc8@buffer
  3508                           
  3509                           ;BTZGDRtx.c: 300:     uint8_t crc = 0;
  3510  0682  01F4               	clrf	crc8@crc
  3511                           
  3512                           ;BTZGDRtx.c: 301:     for (uint8_t i = 0; i < len; i++) {
  3513  0683  01F3               	clrf	crc8@i
  3514  0684                     l1488:	
  3515  0684  0870               	movf	crc8@len,w
  3516  0685  0273               	subwf	crc8@i,w
  3517  0686  1803               	btfsc	3,0
  3518  0687  2E91               	goto	l1490
  3519                           
  3520                           ;BTZGDRtx.c: 302:         crc += buffer[i];
  3521  0688  0873               	movf	crc8@i,w
  3522  0689  0772               	addwf	crc8@buffer,w
  3523  068A  00F1               	movwf	??_crc8
  3524  068B  0086               	movwf	6
  3525  068C  0187               	clrf	7
  3526  068D  0801               	movf	1,w
  3527  068E  07F4               	addwf	crc8@crc,f
  3528                           
  3529                           ;BTZGDRtx.c: 303:     }
  3530  068F  0AF3               	incf	crc8@i,f
  3531  0690  2E84               	goto	l1488
  3532  0691                     l1490:	
  3533                           
  3534                           ;BTZGDRtx.c: 304:     crc = (~crc) + 1;
  3535  0691  09F4               	comf	crc8@crc,f
  3536  0692  0AF4               	incf	crc8@crc,f
  3537                           
  3538                           ;BTZGDRtx.c: 305:     return crc;
  3539  0693  0874               	movf	crc8@crc,w
  3540  0694  0008               	return
  3541  0695                     __end_of_crc8:	
  3542                           
  3543                           	psect	text18
  3544  06D3                     __ptext18:	
  3545 ;; *************** function _millis *****************
  3546 ;; Defined at:
  3547 ;;		line 117 in file "BTZGDRtx.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  4    0[COMMON] unsigned long 
  3554 ;; Registers used:
  3555 ;;		wreg
  3556 ;; Tracked objects:
  3557 ;;		On entry : 1C/1
  3558 ;;		On exit  : 1F/1
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3561 ;;      Params:         4       0       0       0
  3562 ;;      Locals:         0       0       0       0
  3563 ;;      Temps:          0       0       0       0
  3564 ;;      Totals:         4       0       0       0
  3565 ;;Total ram usage:        4 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_button_task
  3572 ;;		_main
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _millis
  3578  06D3                     _millis:	
  3579                           
  3580                           ;BTZGDRtx.c: 118:     return tick;
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _millis: [wreg]
  3584  06D3  0021               	movlb	1	; select bank1
  3585  06D4  082F               	movf	(_tick+3)^(0+128),w	;volatile
  3586  06D5  00F3               	movwf	?_millis+3
  3587  06D6  082E               	movf	(_tick+2)^(0+128),w	;volatile
  3588  06D7  00F2               	movwf	?_millis+2
  3589  06D8  082D               	movf	(_tick+1)^(0+128),w	;volatile
  3590  06D9  00F1               	movwf	?_millis+1
  3591  06DA  082C               	movf	_tick^(0+128),w	;volatile
  3592  06DB  00F0               	movwf	?_millis
  3593  06DC  0008               	return
  3594  06DD                     __end_of_millis:	
  3595                           
  3596                           	psect	text19
  3597  05BC                     __ptext19:	
  3598 ;; *************** function _button_get_state *****************
  3599 ;; Defined at:
  3600 ;;		line 139 in file "BTZGDRtx.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  btn             1    wreg     unsigned char 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  btn             1    2[COMMON] unsigned char 
  3605 ;;  state           1    3[COMMON] _Bool 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      _Bool 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3610 ;; Tracked objects:
  3611 ;;		On entry : 1F/1
  3612 ;;		On exit  : 1E/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3615 ;;      Params:         0       0       0       0
  3616 ;;      Locals:         2       0       0       0
  3617 ;;      Temps:          2       0       0       0
  3618 ;;      Totals:         4       0       0       0
  3619 ;;Total ram usage:        4 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    2
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_button_task
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function _button_get_state
  3631  05BC                     _button_get_state:	
  3632                           
  3633                           ;incstack = 0
  3634                           ; Regs used in _button_get_state: [wreg-fsr0h+status,2+status,0]
  3635                           ;button_get_state@btn stored from wreg
  3636  05BC  00F2               	movwf	button_get_state@btn
  3637                           
  3638                           ;BTZGDRtx.c: 140:     _Bool state = 0;
  3639  05BD  01F3               	clrf	button_get_state@state
  3640                           
  3641                           ;BTZGDRtx.c: 141:     switch (btn) {
  3642  05BE  2DD7               	goto	l1548
  3643  05BF                     l1538:	
  3644                           
  3645                           ;BTZGDRtx.c: 143:         {;BTZGDRtx.c: 144:             state = (PORTAbits.RA2);
  3646  05BF  3000               	movlw	0
  3647  05C0  0020               	movlb	0	; select bank0
  3648  05C1  190C               	btfsc	12,2	;volatile
  3649  05C2  3001               	movlw	1
  3650  05C3  00F3               	movwf	button_get_state@state
  3651                           
  3652                           ;BTZGDRtx.c: 145:         };BTZGDRtx.c: 146:             break;
  3653  05C4  2DED               	goto	l1550
  3654  05C5                     l1540:	
  3655                           
  3656                           ;BTZGDRtx.c: 148:         {;BTZGDRtx.c: 149:             state = (PORTAbits.RA5);
  3657  05C5  3000               	movlw	0
  3658  05C6  0020               	movlb	0	; select bank0
  3659  05C7  1A8C               	btfsc	12,5	;volatile
  3660  05C8  3001               	movlw	1
  3661  05C9  00F3               	movwf	button_get_state@state
  3662                           
  3663                           ;BTZGDRtx.c: 150:         };BTZGDRtx.c: 151:             break;
  3664  05CA  2DED               	goto	l1550
  3665  05CB                     l1542:	
  3666                           
  3667                           ;BTZGDRtx.c: 153:         {;BTZGDRtx.c: 154:             state = (PORTAbits.RA1);
  3668  05CB  3000               	movlw	0
  3669  05CC  0020               	movlb	0	; select bank0
  3670  05CD  188C               	btfsc	12,1	;volatile
  3671  05CE  3001               	movlw	1
  3672  05CF  00F3               	movwf	button_get_state@state
  3673                           
  3674                           ;BTZGDRtx.c: 155:         };BTZGDRtx.c: 156:             break;
  3675  05D0  2DED               	goto	l1550
  3676  05D1                     l1544:	
  3677                           
  3678                           ;BTZGDRtx.c: 158:         {;BTZGDRtx.c: 159:             state = (PORTAbits.RA0);
  3679  05D1  3000               	movlw	0
  3680  05D2  0020               	movlb	0	; select bank0
  3681  05D3  180C               	btfsc	12,0	;volatile
  3682  05D4  3001               	movlw	1
  3683  05D5  00F3               	movwf	button_get_state@state
  3684                           
  3685                           ;BTZGDRtx.c: 160:         };BTZGDRtx.c: 161:             break;
  3686  05D6  2DED               	goto	l1550
  3687  05D7                     l1548:	
  3688  05D7  0872               	movf	button_get_state@btn,w
  3689  05D8  00F0               	movwf	??_button_get_state
  3690  05D9  01F1               	clrf	??_button_get_state+1
  3691                           
  3692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3693                           ; Switch size 1, requested type "space"
  3694                           ; Number of cases is 1, Range of values is 0 to 0
  3695                           ; switch strategies available:
  3696                           ; Name         Instructions Cycles
  3697                           ; simple_byte            4     3 (average)
  3698                           ; direct_byte            8     6 (fixed)
  3699                           ; jumptable            260     6 (fixed)
  3700                           ;	Chosen strategy is simple_byte
  3701  05DA  0871               	movf	??_button_get_state+1,w
  3702  05DB  3A00               	xorlw	0	; case 0
  3703  05DC  1903               	skipnz
  3704  05DD  2DDF               	goto	l2384
  3705  05DE  2DED               	goto	l1550
  3706  05DF                     l2384:	
  3707                           
  3708                           ; Switch size 1, requested type "space"
  3709                           ; Number of cases is 4, Range of values is 0 to 3
  3710                           ; switch strategies available:
  3711                           ; Name         Instructions Cycles
  3712                           ; simple_byte           13     7 (average)
  3713                           ; direct_byte           14     6 (fixed)
  3714                           ; jumptable            260     6 (fixed)
  3715                           ;	Chosen strategy is simple_byte
  3716  05DF  0870               	movf	??_button_get_state,w
  3717  05E0  3A00               	xorlw	0	; case 0
  3718  05E1  1903               	skipnz
  3719  05E2  2DBF               	goto	l1538
  3720  05E3  3A01               	xorlw	1	; case 1
  3721  05E4  1903               	skipnz
  3722  05E5  2DC5               	goto	l1540
  3723  05E6  3A03               	xorlw	3	; case 2
  3724  05E7  1903               	skipnz
  3725  05E8  2DCB               	goto	l1542
  3726  05E9  3A01               	xorlw	1	; case 3
  3727  05EA  1903               	skipnz
  3728  05EB  2DD1               	goto	l1544
  3729  05EC  2DED               	goto	l1550
  3730  05ED                     l1550:	
  3731                           
  3732                           ;BTZGDRtx.c: 164:     return state;
  3733  05ED  0873               	movf	button_get_state@state,w
  3734  05EE  0008               	return
  3735  05EF                     __end_of_button_get_state:	
  3736                           
  3737                           	psect	text20
  3738  06C7                     __ptext20:	
  3739 ;; *************** function ___bmul *****************
  3740 ;; Defined at:
  3741 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  multiplier      1    wreg     unsigned char 
  3744 ;;  multiplicand    1    0[COMMON] unsigned char 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  multiplier      1    2[COMMON] unsigned char 
  3747 ;;  product         1    1[COMMON] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      unsigned char 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 1F/1
  3754 ;;		On exit  : 1F/1
  3755 ;;		Unchanged: 1F/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3757 ;;      Params:         1       0       0       0
  3758 ;;      Locals:         2       0       0       0
  3759 ;;      Temps:          0       0       0       0
  3760 ;;      Totals:         3       0       0       0
  3761 ;;Total ram usage:        3 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    2
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_button_task
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           
  3772                           ;psect for function ___bmul
  3773  06C7                     ___bmul:	
  3774                           
  3775                           ;incstack = 0
  3776                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3777                           ;___bmul@multiplier stored from wreg
  3778  06C7  00F2               	movwf	___bmul@multiplier
  3779  06C8  01F1               	clrf	___bmul@product
  3780  06C9                     l1756:	
  3781  06C9  0870               	movf	___bmul@multiplicand,w
  3782  06CA  1872               	btfsc	___bmul@multiplier,0
  3783  06CB  07F1               	addwf	___bmul@product,f
  3784  06CC  35F0               	lslf	___bmul@multiplicand,f
  3785  06CD  36F2               	lsrf	___bmul@multiplier,f
  3786  06CE  0872               	movf	___bmul@multiplier,w
  3787  06CF  1D03               	btfss	3,2
  3788  06D0  2EC9               	goto	l1756
  3789  06D1  0871               	movf	___bmul@product,w
  3790  06D2  0008               	return
  3791  06D3                     __end_of___bmul:	
  3792                           
  3793                           	psect	text21
  3794  05EF                     __ptext21:	
  3795 ;; *************** function _button_init *****************
  3796 ;; Defined at:
  3797 ;;		line 170 in file "BTZGDRtx.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 1C/0
  3808 ;;		On exit  : 1F/1
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3811 ;;      Params:         0       0       0       0
  3812 ;;      Locals:         0       0       0       0
  3813 ;;      Temps:          0       0       0       0
  3814 ;;      Totals:         0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    3
  3818 ;; This function calls:
  3819 ;;		_memset
  3820 ;; This function is called by:
  3821 ;;		_main
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _button_init
  3827  05EF                     _button_init:	
  3828                           
  3829                           ;BTZGDRtx.c: 172:     memset(&buttons[0], 0, sizeof (button_t));
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _button_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3833  05EF  3020               	movlw	low _buttons
  3834  05F0  00F0               	movwf	memset@dest
  3835  05F1  3001               	movlw	high _buttons
  3836  05F2  2612               	fcall	PL12	;call to abstracted procedure
  3837  05F3  229D               	fcall	_memset
  3838                           
  3839                           ;BTZGDRtx.c: 173:     memset(&buttons[1], 0, sizeof (button_t));
  3840  05F4  302A               	movlw	low (_buttons+10)
  3841  05F5  00F0               	movwf	memset@dest
  3842  05F6  3001               	movlw	high (_buttons+10)
  3843  05F7  2612               	fcall	PL12	;call to abstracted procedure
  3844  05F8  229D               	fcall	_memset
  3845                           
  3846                           ;BTZGDRtx.c: 174:     memset(&buttons[2], 0, sizeof (button_t));
  3847  05F9  3034               	movlw	low (_buttons+20)
  3848  05FA  00F0               	movwf	memset@dest
  3849  05FB  3001               	movlw	high (_buttons+20)
  3850  05FC  2612               	fcall	PL12	;call to abstracted procedure
  3851  05FD  229D               	fcall	_memset
  3852                           
  3853                           ;BTZGDRtx.c: 175:     memset(&buttons[3], 0, sizeof (button_t));
  3854  05FE  303E               	movlw	low (_buttons+30)
  3855  05FF  00F0               	movwf	memset@dest
  3856  0600  3001               	movlw	high (_buttons+30)
  3857  0601  2612               	fcall	PL12	;call to abstracted procedure
  3858  0602  229D               	fcall	_memset
  3859                           
  3860                           ;BTZGDRtx.c: 177:     buttons[0].id = BUTTON_1;
  3861  0603  30A1               	movlw	161
  3862  0604  0022               	movlb	2	; select bank2
  3863  0605  00A1               	movwf	(_buttons^(0+256)+1)
  3864                           
  3865                           ;BTZGDRtx.c: 178:     buttons[1].id = BUTTON_2;
  3866  0606  30A2               	movlw	162
  3867  0607  00AB               	movwf	(_buttons^(0+256)+11)
  3868                           
  3869                           ;BTZGDRtx.c: 179:     buttons[2].id = BUTTON_3;
  3870  0608  30A3               	movlw	163
  3871  0609  00B5               	movwf	(_buttons^(0+256)+21)
  3872                           
  3873                           ;BTZGDRtx.c: 180:     buttons[3].id = BUTTON_4;
  3874  060A  30A4               	movlw	164
  3875  060B  00BF               	movwf	(_buttons^(0+256)+31)
  3876                           
  3877                           ;BTZGDRtx.c: 182:     last_tick = 0;
  3878  060C  0021               	movlb	1	; select bank1
  3879  060D  01A8               	clrf	_last_tick^(0+128)
  3880  060E  01A9               	clrf	(_last_tick+1)^(0+128)
  3881  060F  01AA               	clrf	(_last_tick+2)^(0+128)
  3882  0610  01AB               	clrf	(_last_tick+3)^(0+128)
  3883  0611  0008               	return
  3884  0612                     __end_of_button_init:	
  3885  0612                     PL12:	
  3886  0612  00F1               	movwf	memset@dest+1
  3887  0613  300A               	movlw	10
  3888  0614  01F2               	clrf	memset@c
  3889  0615  01F3               	clrf	memset@c+1
  3890  0616  00F4               	movwf	memset@n
  3891  0617  01F5               	clrf	memset@n+1
  3892  0618  0008               	return
  3893  0619                     __end_ofPL12:	
  3894                           
  3895                           	psect	text22
  3896  029D                     __ptext22:	
  3897 ;; *************** function _memset *****************
  3898 ;; Defined at:
  3899 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memset.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  dest            2    0[COMMON] PTR void 
  3902 ;;		 -> counter_save@block(64), counter_read@temp(16), counter(16), rf_send_packet@plain_msg(31), 
  3903 ;;		 -> buttons(40), 
  3904 ;;  c               2    2[COMMON] int 
  3905 ;;  n               2    4[COMMON] unsigned int 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  s               2    2[BANK0 ] PTR unsigned char 
  3908 ;;		 -> counter_save@block(64), counter_read@temp(16), counter(16), rf_send_packet@plain_msg(31), 
  3909 ;;		 -> buttons(40), 
  3910 ;;  k               2    0[BANK0 ] unsigned int 
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  2    0[COMMON] PTR void 
  3913 ;; Registers used:
  3914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3915 ;; Tracked objects:
  3916 ;;		On entry : 1C/3
  3917 ;;		On exit  : 1F/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3920 ;;      Params:         6       0       0       0
  3921 ;;      Locals:         0       4       0       0
  3922 ;;      Temps:          4       0       0       0
  3923 ;;      Totals:        10       4       0       0
  3924 ;;Total ram usage:       14 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    2
  3927 ;; This function calls:
  3928 ;;		Nothing
  3929 ;; This function is called by:
  3930 ;;		_button_init
  3931 ;;		_rf_send_packet
  3932 ;;		_counter_read
  3933 ;;		_counter_save
  3934 ;;		_main
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _memset
  3940  029D                     _memset:	
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  3944  029D  0871               	movf	memset@dest+1,w
  3945  029E  0020               	movlb	0	; select bank0
  3946  029F  00A3               	movwf	memset@s+1
  3947  02A0  0870               	movf	memset@dest,w
  3948  02A1  00A2               	movwf	memset@s
  3949  02A2  0874               	movf	memset@n,w
  3950  02A3  0475               	iorwf	memset@n+1,w
  3951  02A4  1903               	btfsc	3,2
  3952  02A5  0008               	return
  3953  02A6  0822               	movf	memset@s,w
  3954  02A7  0086               	movwf	6
  3955  02A8  0823               	movf	memset@s+1,w
  3956  02A9  2302               	fcall	PL6	;call to abstracted procedure
  3957  02AA  3EFF               	addlw	255
  3958  02AB  230D               	fcall	PL8	;call to abstracted procedure
  3959  02AC  3003               	movlw	3
  3960  02AD  1903               	skipnz
  3961  02AE  0274               	subwf	memset@n,w
  3962  02AF  1C03               	btfss	3,0
  3963  02B0  0008               	return
  3964  02B1  0822               	movf	memset@s,w
  3965  02B2  3E01               	addlw	1
  3966  02B3  231A               	fcall	PL10	;call to abstracted procedure
  3967  02B4  0087               	movwf	7
  3968  02B5  0872               	movf	memset@c,w
  3969  02B6  0081               	movwf	1
  3970  02B7  0822               	movf	memset@s,w
  3971  02B8  3E02               	addlw	2
  3972  02B9  231A               	fcall	PL10	;call to abstracted procedure
  3973  02BA  2302               	fcall	PL6	;call to abstracted procedure
  3974  02BB  3EFE               	addlw	254
  3975  02BC  00F8               	movwf	??_memset+2
  3976  02BD  30FF               	movlw	255
  3977  02BE  3D77               	addwfc	??_memset+1,w
  3978  02BF  00F9               	movwf	??_memset+3
  3979  02C0  0878               	movf	??_memset+2,w
  3980  02C1  0086               	movwf	6
  3981  02C2  0879               	movf	??_memset+3,w
  3982  02C3  2302               	fcall	PL6	;call to abstracted procedure
  3983  02C4  3EFD               	addlw	253
  3984  02C5  230D               	fcall	PL8	;call to abstracted procedure
  3985  02C6  3007               	movlw	7
  3986  02C7  1903               	skipnz
  3987  02C8  0274               	subwf	memset@n,w
  3988  02C9  1C03               	btfss	3,0
  3989  02CA  0008               	return
  3990  02CB  0822               	movf	memset@s,w
  3991  02CC  3E03               	addlw	3
  3992  02CD  231A               	fcall	PL10	;call to abstracted procedure
  3993  02CE  2302               	fcall	PL6	;call to abstracted procedure
  3994  02CF  3EFC               	addlw	252
  3995  02D0  230D               	fcall	PL8	;call to abstracted procedure
  3996  02D1  3009               	movlw	9
  3997  02D2  1903               	skipnz
  3998  02D3  0274               	subwf	memset@n,w
  3999  02D4  1C03               	btfss	3,0
  4000  02D5  0008               	return
  4001  02D6  0922               	comf	memset@s,w
  4002  02D7  00F6               	movwf	??_memset
  4003  02D8  0923               	comf	memset@s+1,w
  4004  02D9  00F7               	movwf	??_memset+1
  4005  02DA  0AF6               	incf	??_memset,f
  4006  02DB  1903               	skipnz
  4007  02DC  0AF7               	incf	??_memset+1,f
  4008  02DD  0876               	movf	??_memset,w
  4009  02DE  00A0               	movwf	memset@k
  4010  02DF  0877               	movf	??_memset+1,w
  4011  02E0  00A1               	movwf	memset@k+1
  4012  02E1  3003               	movlw	3
  4013  02E2  05A0               	andwf	memset@k,f
  4014  02E3  01A1               	clrf	memset@k+1
  4015  02E4  0820               	movf	memset@k,w
  4016  02E5  07A2               	addwf	memset@s,f
  4017  02E6  0821               	movf	memset@k+1,w
  4018  02E7  3DA3               	addwfc	memset@s+1,f
  4019  02E8  0820               	movf	memset@k,w
  4020  02E9  02F4               	subwf	memset@n,f
  4021  02EA  0821               	movf	memset@k+1,w
  4022  02EB  3BF5               	subwfb	memset@n+1,f
  4023  02EC  30FC               	movlw	252
  4024  02ED  05F4               	andwf	memset@n,f
  4025  02EE  30FF               	movlw	255
  4026  02EF  05F5               	andwf	memset@n+1,f
  4027  02F0                     l2076:	
  4028  02F0  0874               	movf	memset@n,w
  4029  02F1  0475               	iorwf	memset@n+1,w
  4030  02F2  1903               	btfsc	3,2
  4031  02F3  0008               	return
  4032  02F4  0822               	movf	memset@s,w
  4033  02F5  0086               	movwf	6
  4034  02F6  0823               	movf	memset@s+1,w
  4035  02F7  0087               	movwf	7
  4036  02F8  0872               	movf	memset@c,w
  4037  02F9  0081               	movwf	1
  4038  02FA  3001               	movlw	1
  4039  02FB  02F4               	subwf	memset@n,f
  4040  02FC  3000               	movlw	0
  4041  02FD  3BF5               	subwfb	memset@n+1,f
  4042  02FE  0AA2               	incf	memset@s,f
  4043  02FF  1903               	skipnz
  4044  0300  0AA3               	incf	memset@s+1,f
  4045  0301  2AF0               	goto	l2076
  4046  0302                     __end_of_memset:	
  4047  0302                     PL6:	
  4048  0302  0087               	movwf	7
  4049  0303  0872               	movf	memset@c,w
  4050  0304  0081               	movwf	1
  4051  0305  0874               	movf	memset@n,w
  4052  0306  0722               	addwf	memset@s,w
  4053  0307  00F6               	movwf	??_memset
  4054  0308  0875               	movf	memset@n+1,w
  4055  0309  3D23               	addwfc	memset@s+1,w
  4056  030A  00F7               	movwf	??_memset+1
  4057  030B  0876               	movf	??_memset,w
  4058  030C  0008               	return
  4059  030D                     __end_ofPL6:	
  4060  030D                     PL8:	
  4061  030D  00F8               	movwf	??_memset+2
  4062  030E  30FF               	movlw	255
  4063  030F  3D77               	addwfc	??_memset+1,w
  4064  0310  00F9               	movwf	??_memset+3
  4065  0311  0878               	movf	??_memset+2,w
  4066  0312  0086               	movwf	6
  4067  0313  0879               	movf	??_memset+3,w
  4068  0314  0087               	movwf	7
  4069  0315  0872               	movf	memset@c,w
  4070  0316  0081               	movwf	1
  4071  0317  3000               	movlw	0
  4072  0318  0275               	subwf	memset@n+1,w
  4073  0319  0008               	return
  4074  031A                     __end_ofPL8:	
  4075  031A                     PL10:	
  4076  031A  00F6               	movwf	??_memset
  4077  031B  3000               	movlw	0
  4078  031C  3D23               	addwfc	memset@s+1,w
  4079  031D  00F7               	movwf	??_memset+1
  4080  031E  0876               	movf	??_memset,w
  4081  031F  0086               	movwf	6
  4082  0320  0877               	movf	??_memset+1,w
  4083  0321  0008               	return
  4084  0322                     __end_ofPL10:	
  4085                           
  4086                           	psect	intentry
  4087  0004                     __pintentry:	
  4088 ;; *************** function _INTERRUPT_InterruptManager *****************
  4089 ;; Defined at:
  4090 ;;		line 377 in file "BTZGDRtx.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0, pclath, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4104 ;;      Params:         0       0       0       0
  4105 ;;      Locals:         0       0       0       0
  4106 ;;      Temps:          0       0       0       0
  4107 ;;      Totals:         0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    1
  4111 ;; This function calls:
  4112 ;;		_timer_interrupt_handler
  4113 ;; This function is called by:
  4114 ;;		Interrupt level 1
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118  0004                     _INTERRUPT_InterruptManager:	
  4119                           
  4120                           ;incstack = 0
  4121  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4122                           
  4123                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4124  0005  3180               	pagesel	$
  4125                           
  4126                           ;BTZGDRtx.c: 379:     if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  4127  0006  1A8B               	btfsc	11,5	;volatile
  4128  0007  1D0B               	btfss	11,2	;volatile
  4129  0008  280F               	goto	i1l170
  4130                           
  4131                           ;BTZGDRtx.c: 382:         INTCONbits.TMR0IF = 0;
  4132  0009  110B               	bcf	11,2	;volatile
  4133                           
  4134                           ;BTZGDRtx.c: 384:         TMR0 = timer0ReloadVal;
  4135  000A  087D               	movf	_timer0ReloadVal,w	;volatile
  4136  000B  0020               	movlb	0	; select bank0
  4137  000C  0095               	movwf	21	;volatile
  4138                           
  4139                           ;BTZGDRtx.c: 386:         timer_interrupt_handler();
  4140  000D  26E5               	fcall	_timer_interrupt_handler
  4141                           
  4142                           ;BTZGDRtx.c: 388:     } else if (INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1) {
  4143  000E  2812               	goto	i1l174
  4144  000F                     i1l170:	
  4145  000F  1D8B               	btfss	11,3	;volatile
  4146  0010  2812               	goto	i1l174
  4147  0011  080B               	movf	11,w	;volatile
  4148  0012                     i1l174:	
  4149  0012  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4150  0013  0009               	retfie
  4151  0014                     __end_of_INTERRUPT_InterruptManager:	
  4152                           
  4153                           	psect	text24
  4154  06E5                     __ptext24:	
  4155 ;; *************** function _timer_interrupt_handler *****************
  4156 ;; Defined at:
  4157 ;;		line 109 in file "BTZGDRtx.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0
  4166 ;; Tracked objects:
  4167 ;;		On entry : 1F/0
  4168 ;;		On exit  : 1F/1
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4171 ;;      Params:         0       0       0       0
  4172 ;;      Locals:         0       0       0       0
  4173 ;;      Temps:          0       0       0       0
  4174 ;;      Totals:         0       0       0       0
  4175 ;;Total ram usage:        0 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_INTERRUPT_InterruptManager
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _timer_interrupt_handler
  4186  06E5                     _timer_interrupt_handler:	
  4187                           
  4188                           ;BTZGDRtx.c: 110:     tick++;
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in _timer_interrupt_handler: [wreg+status,2+status,0]
  4192  06E5  3001               	movlw	1
  4193  06E6  0021               	movlb	1	; select bank1
  4194  06E7  07AC               	addwf	_tick^(0+128),f	;volatile
  4195  06E8  3000               	movlw	0
  4196  06E9  3DAD               	addwfc	(_tick+1)^(0+128),f	;volatile
  4197  06EA  3DAE               	addwfc	(_tick+2)^(0+128),f	;volatile
  4198  06EB  3DAF               	addwfc	(_tick+3)^(0+128),f	;volatile
  4199  06EC  0008               	return
  4200  06ED                     __end_of_timer_interrupt_handler:	
  4201  007E                     btemp	set	126	;btemp
  4202  007E                     int$flags	set	126
  4203  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         85
    Persistent  33
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     78      78
    BANK1            80     25      70
    BANK2            80      0      40

Pointer List with Targets:

    memset@dest	PTR void  size(2) Largest target is 64
		 -> counter_save@block(BANK0[64]), counter_read@temp(BANK0[16]), counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), 
		 -> buttons(BANK2[40]), 

    memset@s	PTR unsigned char  size(2) Largest target is 64
		 -> counter_save@block(BANK0[64]), counter_read@temp(BANK0[16]), counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), 
		 -> buttons(BANK2[40]), 

    memcpy@d1	PTR void  size(1) Largest target is 31
		 -> counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), button_packet(BANK1[5]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 31
		 -> counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), button_packet(BANK1[5]), 

    memcpy@s1	PTR const void  size(2) Largest target is 40
		 -> counter_read@temp(BANK0[16]), counter(BANK1[16]), button_task@combo1_pressed_now(BANK1[4]), button_task@combo0_pressed_now(BANK1[4]), 
		 -> buttons.duration(BANK2[4]), button_packet(BANK1[5]), buttons(BANK2[40]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 40
		 -> counter_read@temp(BANK0[16]), counter(BANK1[16]), button_task@combo1_pressed_now(BANK1[4]), button_task@combo0_pressed_now(BANK1[4]), 
		 -> buttons.duration(BANK2[4]), button_packet(BANK1[5]), buttons(BANK2[40]), 

    counter_save@ctx	PTR struct . size(1) Largest target is 16
		 -> counter(BANK1[16]), 

    counter_save@temp	PTR unsigned short  size(1) Largest target is 16
		 -> counter(BANK1[16]), 

    counter_read@ctx	PTR struct . size(1) Largest target is 16
		 -> counter(BANK1[16]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> counter_save@block(BANK0[64]), 

    counter_inc_by_n@ctx	PTR struct . size(1) Largest target is 16
		 -> counter(BANK1[16]), 

    counter_inc@ctx	PTR struct . size(1) Largest target is 16
		 -> counter(BANK1[16]), 

    rf_send_packet@data	PTR unsigned char  size(1) Largest target is 5
		 -> button_packet(BANK1[5]), 

    crc8@buffer	PTR unsigned char  size(1) Largest target is 31
		 -> rf_send_packet@plain_msg(BANK0[31]), 

    sp__memcpy	PTR void  size(1) Largest target is 31
		 -> counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), button_packet(BANK1[5]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> counter_save@block(BANK0[64]), counter_read@temp(BANK0[16]), counter(BANK1[16]), rf_send_packet@plain_msg(BANK0[31]), 
		 -> buttons(BANK2[40]), 


Critical Paths under _main in COMMON

    _main->_counter_read
    _counter_save->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _counter_read->_memset
    _counter_inc_by_n->_counter_inc
    _button_task->_rf_send_packet
    _rf_send_packet->_rand
    _rf_encrypt_and_send->_usart_write
    _rand->___omul
    _button_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_button_task
    _counter_save->_memset
    _counter_read->_memset
    _button_task->_rf_send_packet
    _rf_send_packet->_rand
    _rand->___omul
    _button_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_button_task

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   27188
                                              9 BANK1     16    16      0
                        _button_init
                        _button_task
                   _counter_inc_by_n
                       _counter_read
                       _counter_save
                             _memset
                             _millis
                              _srand
                  _system_initialize
 ---------------------------------------------------------------------------------
 (1) _system_initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _srand                                                4     2      2      98
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _counter_save                                        72    72      0    3915
                                              4 BANK0     72    72      0
                   _FLASH_WriteBlock
                             _memset
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     612
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     144
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _counter_read                                        21    21      0    5825
                                             10 COMMON     3     3      0
                                              4 BANK0     18    18      0
                     _FLASH_ReadWord
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     308
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _counter_inc_by_n                                     5     3      2     738
                                              3 COMMON     5     3      2
                        _counter_inc
 ---------------------------------------------------------------------------------
 (2) _counter_inc                                          3     3      0     561
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _button_task                                         13    13      0   11012
                                             74 BANK0      4     4      0
                                              0 BANK1      9     9      0
                             ___bmul
                   _button_get_state
                             _memcpy
                             _millis
                     _rf_send_packet
 ---------------------------------------------------------------------------------
 (2) _rf_send_packet                                      52    51      1    8224
                                             11 COMMON     2     1      1
                                             24 BANK0     50    50      0
                               _crc8
                             _memcpy
                             _memset
                               _rand
                _rf_encrypt_and_send
                        _usart_write
 ---------------------------------------------------------------------------------
 (3) _rf_encrypt_and_send                                  4     4      0     159
                                              1 COMMON     4     4      0
                        _usart_write
 ---------------------------------------------------------------------------------
 (3) _usart_write                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _rand                                                10     8      2     244
                                              9 COMMON     2     0      2
                                             16 BANK0      8     8      0
                             ___omul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               9     5      4    2152
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     4      1     246
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _millis                                               4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) _button_get_state                                     4     4      0      49
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     222
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _button_init                                          0     0      0    2780
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                              14     8      6    2780
                                              0 COMMON    10     4      6
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0       0
            _timer_interrupt_handler
 ---------------------------------------------------------------------------------
 (6) _timer_interrupt_handler                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _button_init
     _memset
   _button_task
     ___bmul
     _button_get_state
     _memcpy
     _millis
     _rf_send_packet
       _crc8
       _memcpy
       _memset
       _rand
         ___omul
       _rf_encrypt_and_send
         _usart_write
       _usart_write
   _counter_inc_by_n
     _counter_inc
   _counter_read
     _FLASH_ReadWord
     _memcpy
     _memset
   _counter_save
     _FLASH_WriteBlock
       _FLASH_EraseBlock
     _memset
   _memset
   _millis
   _srand
   _system_initialize

 _INTERRUPT_InterruptManager (ROOT)
   _timer_interrupt_handler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CA       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     19      46       8       87.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      28      10       50.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      CA      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 19 16:06:21 2021

                   _reserve_location 07E0                      rf_send_packet@i 0058  
                     ___bmul@product 0071                          __CFG_CP$OFF 0000  
                                 PL2 03F2                                   PL4 0290  
                                 PL6 0302                                   PL8 030D  
                    _timer0ReloadVal 007D                                  PL10 031A  
                                PL20 0678                                  PL12 0612  
                                PL30 01CC                                  PL22 0401  
                                PL14 03FB                                  PL40 01D9  
                                PL32 04F6                                  PL24 0574  
                                PL16 04EC                                  PL42 01DE  
                                PL34 04AC                                  PL26 0579  
                                PL18 01BC                                  PL44 01E3  
                                PL36 0580                                  PL28 01C5  
                                PL46 01E8                                  PL38 01D3  
                        __CFG_LVP$ON 0000                                  l132 00AB  
                                l146 06DE                                  l138 013A  
                                u490 0504                                  u595 0392  
                                u695 0474                                  u895 06AF  
                  rf_send_packet@len 007B                         __CFG_BORV$LO 0000  
                                wreg 0009        button_task@combo0_pressed_now 00CD  
     FLASH_WriteBlock@flashWordArray 0075               __end_of_rf_send_packet 0290  
                               l2200 0047                                 l1410 0507  
                               l2212 008E                                 l2204 004A  
                               l1414 0519                                 l2080 0629  
                               l2232 00C2                                 l2306 04BA  
                               l2330 054F                                 l2076 02F0  
                               l1540 05C5                                 l2244 00F0  
                               l2340 0406                                 l1542 05CB  
                               l1550 05ED                                 l2086 0620  
                               l2174 0283                                 l1544 05D1  
                               l2272 0151                                 l2256 0123  
                               l1538 05BF                                 l1490 0691  
                               l2194 0045                                 l1706 0460  
                               l2362 045E                                 l1548 05D7  
                               l2284 017F                                 l2384 05DF  
                               l1488 0684                                 l2296 01B2  
                               l1728 0480                                 l1930 06A9  
                               l1756 06C9                                 _LATA 010C  
                               _TMR0 0015                   rf_send_packet@data 0057  
                               _WPUA 020C                         __CFG_WRT$OFF 0000  
                               _crc8 0681                                 _main 0406  
                               _rand 0322                                 _seed 00C0  
                               _tick 00AC                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                        _usart_write 06DD                    ?_FLASH_WriteBlock 0073  
                      __CFG_BOREN$ON 0000                         ?_counter_inc 0070  
                               start 0014                   ??_FLASH_WriteBlock 0076  
                  ?_button_get_state 0070                    ___bmul@multiplier 0072  
                      __CFG_MCLRE$ON 0000                   ??_button_get_state 0070  
                              ?_crc8 0070                                ?_main 0070  
                              ?_rand 0079                        __CFG_WDTE$OFF 0000  
                              i1l170 000F                                i1l174 0012  
                              _RCSTA 019D                                _TRISA 008C  
                              _TXREG 019A                                _TXSTA 019E  
                rf_send_packet@index 0069                         ?_button_init 0070  
                       ?_button_task 0070                  rf_send_packet@tx_id 005D  
      button_task@combo1_pressed_now 00D1                button_get_state@state 0073  
                              crc8@i 0073             rf_send_packet@random_nm0 0061  
           rf_send_packet@random_nm1 0065             rf_send_packet@random_nm2 0059  
                    ?_rf_send_packet 007B                                _srand 0695  
                      ?_counter_read 0070                        ?_counter_save 0070  
                              status 0003                                wtemp0 007E  
                    __initialization 0015                         __end_of_crc8 0695  
                       __end_of_main 0460                         __end_of_rand 03A3  
        __end_of_rf_encrypt_and_send 0678          ?_INTERRUPT_InterruptManager 0070  
          __size_of_counter_inc_by_n 0011                               ??_crc8 0071  
                             ??_main 00D6                               ??_rand 0030  
            __size_of_FLASH_ReadWord 001A                       __CFG_PLLEN$OFF 0000  
          FLASH_WriteBlock@writeAddr 0073                               _APFCON 011D  
                             ?_srand 0070                               _ANSELA 018C  
                             _BORCON 0116              _timer_interrupt_handler 06E5  
                     ??_counter_read 007A                               _ODCONA 028C  
                     ??_counter_save 0024                               _INLVLA 038C  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196            __size_of_FLASH_EraseBlock 0018  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                               ___bmul 06C7  
                             ___omul 04FD                       __CFG_STVREN$ON 0000  
                     counter_inc@ctx 0072                               _memcpy 0619  
                             _memset 029D                               _millis 06D3  
            FLASH_ReadWord@flashAddr 0070                               srand@s 0070  
           __end_of_reserve_location 0800              __end_of__initialization 0021  
                ___bmul@multiplicand 0070                 __size_of_counter_inc 004F  
                     __pcstackCOMMON 0070                  button_get_state@btn 0072  
                      __end_of_srand 06A6                           __end_ofPL2 03FB  
                         __end_ofPL4 029D                           __end_ofPL6 030D  
                         __end_ofPL8 031A                       _OPTION_REGbits 0095  
        FLASH_WriteBlock@GIEBitValue 0079            ??_timer_interrupt_handler 0070  
               __size_of_button_init 0023                 __size_of_button_task 0198  
                            ??_srand 0072                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pnvCOMMON 007D  
                       ?_usart_write 0070                        _button_packet 00C8  
                         __pmaintext 0406                              ?___bmul 0070  
                            ?___omul 0020                           __pintentry 0004  
                            ?_memcpy 0070                              _BAUDCON 019F  
                            ?_memset 0070                  ___omul@multiplicand 0028  
                            ?_millis 0070                     _counter_inc_by_n 06A6  
               __end_of_counter_read 04EC                 __end_of_counter_save 0574  
          __size_of_FLASH_WriteBlock 004C                           crc8@buffer 0072  
                     _FLASH_ReadWord 0639                     ??_rf_send_packet 007C  
          __size_of_button_get_state 0033                              _OSCTUNE 0098  
                            _SLRCONA 030C                     _FLASH_EraseBlock 0653  
    __end_of_timer_interrupt_handler 06ED                      __size_of___bmul 000C  
                    __size_of___omul 0047               __end_of_FLASH_ReadWord 0653  
                    __size_of_memcpy 0020                      __size_of_memset 0065  
                    __size_of_millis 000A                       _bit_convt_4to6 06B7  
                            __ptext1 0586                              __ptext2 0695  
                            __ptext3 0544                              __ptext4 0460  
                            __ptext5 0653                              __ptext6 04B1  
                            __ptext7 0639                              __ptext8 06A6  
                            __ptext9 03A3                              crc8@crc 0074  
                            crc8@len 0070                              _counter 00B0  
                            _buttons 0120                      counter_read@ctx 0034  
                            clrloop0 06EE                 end_of_initialization 0021  
                    counter_save@ctx 0069                       ___omul@product 0071  
                            memcpy@d 0077                              memcpy@n 0072  
                            memcpy@s 0075                              memset@c 0072  
                            memset@k 0020                              memset@n 0074  
                            memset@s 0022                         button_task@i 00D5  
           _reserve_location_absaddr 07E0               __end_of_bit_convt_4to6 06C7  
          FLASH_ReadWord@GIEBitValue 0072                      ?_FLASH_ReadWord 0070  
                          _PORTAbits 000C                     __CFG_FOSC$INTOSC 0000  
       __size_of_rf_encrypt_and_send 000D                    FLASH_WriteBlock@i 007C  
               __size_of_usart_write 0008                __size_of_counter_read 003B  
              __size_of_counter_save 0030                       __end_of___bmul 06D3  
                     __end_of___omul 0544                     _FLASH_WriteBlock 0460  
                     __end_of_memcpy 0639                       __end_of_memset 0302  
                     __end_of_millis 06DD              rf_send_packet@plain_msg 0038  
                   _button_get_state 05BC                          __end_ofPL10 0322  
                        __end_ofPL20 0681                          __end_ofPL12 0619  
                        __end_ofPL30 01D3                          __end_ofPL22 0406  
                        __end_ofPL14 0401                          __end_ofPL40 01DE  
                        __end_ofPL32 04FD                          __end_ofPL24 0579  
                        __end_ofPL16 04F6                          __end_ofPL42 01E3  
                        __end_ofPL34 04B1                          __end_ofPL26 0580  
                        __end_ofPL18 01C5                          __end_ofPL44 01E8  
                        __end_ofPL36 0586                          __end_ofPL28 01CC  
                        __end_ofPL46 01ED                          __end_ofPL38 01D9  
                start_initialization 0015                       _combo0_pressed 00A4  
           __end_of_counter_inc_by_n 06B7                       _combo1_pressed 00A0  
                       _counter_read 04B1                         _counter_save 0544  
                  ___omul@multiplier 0020                        ??_counter_inc 0070  
                   __CFG_LPBOREN$OFF 0000                             ??___bmul 0071  
                           ??___omul 0070                        counter_read@i 0035  
                      counter_save@i 006B                             ??_memcpy 0074  
                           ??_memset 0076          FLASH_EraseBlock@GIEBitValue 0072  
                           ??_millis 0074             __end_of_FLASH_EraseBlock 066B  
                         memset@dest 0070                        ??_button_init 007A  
                      ??_button_task 006A                            ___latbits 0000  
                      __pcstackBANK0 0020                        __pcstackBANK1 00CD  
                __end_of_counter_inc 03F2         ??_INTERRUPT_InterruptManager 0070  
           ?_timer_interrupt_handler 0070                            _last_tick 00A8  
                     __size_of_srand 0011                  __end_of_button_init 0612  
     FLASH_WriteBlock@blockStartAddr 007A                  __end_of_button_task 01BC  
                  counter_inc_by_n@i 0075                            clear_ram0 06ED  
                _rf_encrypt_and_send 066B  __size_of_INTERRUPT_InterruptManager 0010  
                           _PIR1bits 0011            FLASH_EraseBlock@startAddr 0070  
                   ??_FLASH_ReadWord 0072                 ?_rf_encrypt_and_send 0070  
                  _system_initialize 0586                    counter_save@block 0029  
                 ?_system_initialize 0070              __size_of_rf_send_packet 00A3  
           __end_of_FLASH_WriteBlock 04AC                          _counter_inc 03A3  
                ??_system_initialize 0070             __end_of_button_get_state 05EF  
                          memcpy@tmp 0074                ??_rf_encrypt_and_send 0071  
          __end_of_system_initialize 05BC                          _button_init 05EF  
                        _button_task 0024                             __ptext10 0024  
                           __ptext11 01ED                             __ptext20 06C7  
                           __ptext12 066B                             __ptext21 05EF  
                           __ptext13 06DD                             __ptext22 029D  
                           __ptext14 0322                             __ptext15 04FD  
                           __ptext24 06E5                             __ptext16 0619  
                           __ptext17 0681                             __ptext18 06D3  
                           __ptext19 05BC                      usart_write@data 0070  
                      __size_of_crc8 0014                        ??_usart_write 0070  
                  ?_counter_inc_by_n 0073                        __size_of_main 005A  
                      __size_of_rand 0081                   ??_counter_inc_by_n 0075  
                   counter_read@temp 0024                  counter_inc_by_n@ctx 0077  
                counter_inc_by_n@val 0073                             int$flags 007E  
 __end_of_INTERRUPT_InterruptManager 0014           _INTERRUPT_InterruptManager 0004  
           rf_encrypt_and_send@mbyte 0074                             main@seed 00E2  
                  ?_FLASH_EraseBlock 0070                     counter_save@temp 006A  
                 ??_FLASH_EraseBlock 0072                           _INTCONbits 000B  
                           memcpy@d1 0078                             memcpy@s1 0070  
           __p_reserve_location_text 07E0                             intlevel1 0000  
                         _PMCON1bits 0195                    __CFG_CLKOUTEN$OFF 0000  
                __end_of_usart_write 06E5              rf_encrypt_and_send@data 0071  
                      __pstringtext1 06B7                           _OPTION_REG 0095  
         __size_of_system_initialize 0036               rf_encrypt_and_send@enc 0072  
                     _rf_send_packet 01ED     __size_of_timer_interrupt_handler 0008  
